
prueba_sdram_buena.elf:     file format elf32-littlenios2
prueba_sdram_buena.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x000004dc memsz 0x000004dc flags r-x
    LOAD off    0x000014dc vaddr 0x000004dc paddr 0x000004e0 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000014e4 vaddr 0x000004e4 paddr 0x000004e4 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-
    LOAD off    0x00002000 vaddr 0x04001000 paddr 0x04001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04001000  04001000  00002000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  04001020  04001020  00002020  2**0
                  CONTENTS
  2 .text         000004c4  00000000  00000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  000004c4  000004c4  000014c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000004dc  000004e0  000014dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000004e4  000004e4  000014e4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  000004f0  000004f0  00002020  2**0
                  CONTENTS
  7 .onchip       00000000  04001020  04001020  00002020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000001e8  00000000  00000000  00002048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000010e9  00000000  00000000  00002230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000906  00000000  00000000  00003319  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000ae0  00000000  00000000  00003c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000254  00000000  00000000  00004700  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000086b  00000000  00000000  00004954  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000006ea  00000000  00000000  000051bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000058ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000000e8  00000000  00000000  000058f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000068ce  2**0
                  CONTENTS, READONLY
 19 .cpu          00000004  00000000  00000000  000068d1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000068d5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000068d6  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  000068d7  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  000068e2  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  000068ed  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000009  00000000  00000000  000068f8  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000059  00000000  00000000  00006901  2**0
                  CONTENTS, READONLY
 27 .jdi          0000381f  00000000  00000000  0000695a  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00279510  00000000  00000000  0000a179  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04001000 l    d  .entry	00000000 .entry
04001020 l    d  .exceptions	00000000 .exceptions
00000000 l    d  .text	00000000 .text
000004c4 l    d  .rodata	00000000 .rodata
000004dc l    d  .rwdata	00000000 .rwdata
000004e4 l    d  .bss	00000000 .bss
000004f0 l    d  .sdram	00000000 .sdram
04001020 l    d  .onchip	00000000 .onchip
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../prueba_sdram_buena_bsp//obj/HAL/src/crt0.o
00000038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000174 g     F .text	0000002c alt_main
000004e0 g       *ABS*	00000000 __flash_rwdata_start
000001a0 g     F .text	00000038 alt_putstr
000002c4 g     F .text	00000008 altera_nios2_gen2_irq_init
04001000 g     F .entry	0000000c __reset
00000000 g       *ABS*	00000000 __flash_exceptions_start
000004e8 g     O .bss	00000004 alt_argv
000084dc g       *ABS*	00000000 _gp
000001d8 g     F .text	00000004 usleep
000003e0 g     F .text	00000064 .hidden __udivsi3
000004f0 g       *ABS*	00000000 __bss_end
000002bc g     F .text	00000004 alt_dcache_flush_all
000004e0 g       *ABS*	00000000 __ram_rwdata_end
000004dc g       *ABS*	00000000 __ram_rodata_end
000004dc g     O .rwdata	00000004 jtag_uart_0
00000444 g     F .text	00000058 .hidden __umodsi3
000004f0 g       *ABS*	00000000 end
04000000 g       *ABS*	00000000 __alt_stack_pointer
00000200 g     F .text	00000034 altera_avalon_jtag_uart_write
00000000 g     F .text	0000003c _start
000001fc g     F .text	00000004 alt_sys_init
0000049c g     F .text	00000028 .hidden __mulsi3
000004dc g       *ABS*	00000000 __ram_rwdata_start
000004c4 g       *ABS*	00000000 __ram_rodata_start
00000234 g     F .text	00000088 alt_busy_sleep
000004f0 g       *ABS*	00000000 __alt_stack_base
000004e4 g       *ABS*	00000000 __bss_start
0000003c g     F .text	00000058 main
000004e4 g     O .bss	00000004 alt_envp
000002e8 g     F .text	00000084 .hidden __divsi3
000004c4 g       *ABS*	00000000 __flash_rodata_start
000001dc g     F .text	00000020 alt_irq_init
000004ec g     O .bss	00000004 alt_argc
04001020 g       *ABS*	00000000 __ram_exceptions_start
000004e0 g       *ABS*	00000000 _edata
000004f0 g       *ABS*	00000000 _end
04001020 g       *ABS*	00000000 __ram_exceptions_end
04001000 g       *ABS*	00000000 __alt_mem_onchip
0000036c g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000000 g       *ABS*	00000000 __alt_mem_sdram
0400100c g       .entry	00000000 _exit
000002cc g     F .text	0000001c strlen
000002c0 g     F .text	00000004 alt_icache_flush_all
00000094 g     F .text	000000e0 alt_load



Disassembly of section .entry:

04001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4001000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
 4001004:	08400014 	ori	at,at,0
    jmp r1
 4001008:	0800683a 	jmp	at

0400100c <_exit>:
	...

Disassembly of section .text:

00000000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   0:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
   4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   8:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
   c:	d6a13714 	ori	gp,gp,34012
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  10:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  14:	10813914 	ori	r2,r2,1252

    movhi r3, %hi(__bss_end)
  18:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  1c:	18c13c14 	ori	r3,r3,1264

    beq r2, r3, 1f
  20:	10c00326 	beq	r2,r3,30 <_start+0x30>

0:
    stw zero, (r2)
  24:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  28:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  2c:	10fffd36 	bltu	r2,r3,24 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  30:	00000940 	call	94 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  34:	00001740 	call	174 <alt_main>

00000038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  38:	003fff06 	br	38 <alt_after_alt_main>

0000003c <main>:
#include "sys/alt_stdio.h"
#include "system.h"
#include "unistd.h"
int main()
{ 
  alt_putstr("Hello from Nios II!\n");
  3c:	01000034 	movhi	r4,0

#include "sys/alt_stdio.h"
#include "system.h"
#include "unistd.h"
int main()
{ 
  40:	defffd04 	addi	sp,sp,-12
  alt_putstr("Hello from Nios II!\n");
  44:	21013104 	addi	r4,r4,1220

#include "sys/alt_stdio.h"
#include "system.h"
#include "unistd.h"
int main()
{ 
  48:	dc400115 	stw	r17,4(sp)
  4c:	dc000015 	stw	r16,0(sp)
  50:	dfc00215 	stw	ra,8(sp)
  alt_putstr("Hello from Nios II!\n");
  54:	00001a00 	call	1a0 <alt_putstr>
  //void* sdram_base =  SDRAM_BASE;
  int* sdram_base =  SDRAM_BASE;
  int* led_base = LEDS_BASE;
  *sdram_base = 5;
  58:	00c00144 	movi	r3,5
  5c:	0005883a 	mov	r2,zero
  60:	10c00015 	stw	r3,0(r2)
  /* Event loop never exits. */
  while (1){
	  alt_putstr("Hello from Nios II!\n");
	  *sdram_base =*sdram_base + 1;
  64:	0021883a 	mov	r16,zero
	  *led_base = * sdram_base;
  68:	04410034 	movhi	r17,1024
  int* sdram_base =  SDRAM_BASE;
  int* led_base = LEDS_BASE;
  *sdram_base = 5;
  /* Event loop never exits. */
  while (1){
	  alt_putstr("Hello from Nios II!\n");
  6c:	01000034 	movhi	r4,0
  70:	21013104 	addi	r4,r4,1220
  74:	00001a00 	call	1a0 <alt_putstr>
	  *sdram_base =*sdram_base + 1;
  78:	80800017 	ldw	r2,0(r16)
	  *led_base = * sdram_base;
	  usleep(1000);
  7c:	0100fa04 	movi	r4,1000
  int* led_base = LEDS_BASE;
  *sdram_base = 5;
  /* Event loop never exits. */
  while (1){
	  alt_putstr("Hello from Nios II!\n");
	  *sdram_base =*sdram_base + 1;
  80:	10800044 	addi	r2,r2,1
  84:	80800015 	stw	r2,0(r16)
	  *led_base = * sdram_base;
  88:	88800015 	stw	r2,0(r17)
	  usleep(1000);
  8c:	00001d80 	call	1d8 <usleep>
  90:	003ff606 	br	6c <main+0x30>

00000094 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  94:	deffff04 	addi	sp,sp,-4
  98:	01000034 	movhi	r4,0
  9c:	01400034 	movhi	r5,0
  a0:	dfc00015 	stw	ra,0(sp)
  a4:	21013704 	addi	r4,r4,1244
  a8:	29413804 	addi	r5,r5,1248

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  ac:	2140061e 	bne	r4,r5,c8 <alt_load+0x34>
  b0:	01010034 	movhi	r4,1024
  b4:	01400034 	movhi	r5,0
  b8:	21040804 	addi	r4,r4,4128
  bc:	29400004 	addi	r5,r5,0
  c0:	2140121e 	bne	r4,r5,10c <alt_load+0x78>
  c4:	00000b06 	br	f4 <alt_load+0x60>
  c8:	00c00034 	movhi	r3,0
  cc:	18c13804 	addi	r3,r3,1248
  d0:	1907c83a 	sub	r3,r3,r4
  d4:	0005883a 	mov	r2,zero
  {
    while( to != end )
  d8:	10fff526 	beq	r2,r3,b0 <alt_load+0x1c>
    {
      *to++ = *from++;
  dc:	114f883a 	add	r7,r2,r5
  e0:	39c00017 	ldw	r7,0(r7)
  e4:	110d883a 	add	r6,r2,r4
  e8:	10800104 	addi	r2,r2,4
  ec:	31c00015 	stw	r7,0(r6)
  f0:	003ff906 	br	d8 <alt_load+0x44>
  f4:	01000034 	movhi	r4,0
  f8:	01400034 	movhi	r5,0
  fc:	21013104 	addi	r4,r4,1220
 100:	29413104 	addi	r5,r5,1220

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 104:	2140101e 	bne	r4,r5,148 <alt_load+0xb4>
 108:	00000b06 	br	138 <alt_load+0xa4>
 10c:	00c10034 	movhi	r3,1024
 110:	18c40804 	addi	r3,r3,4128
 114:	1907c83a 	sub	r3,r3,r4
 118:	0005883a 	mov	r2,zero
  {
    while( to != end )
 11c:	10fff526 	beq	r2,r3,f4 <alt_load+0x60>
    {
      *to++ = *from++;
 120:	114f883a 	add	r7,r2,r5
 124:	39c00017 	ldw	r7,0(r7)
 128:	110d883a 	add	r6,r2,r4
 12c:	10800104 	addi	r2,r2,4
 130:	31c00015 	stw	r7,0(r6)
 134:	003ff906 	br	11c <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 138:	00002bc0 	call	2bc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 13c:	dfc00017 	ldw	ra,0(sp)
 140:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 144:	00002c01 	jmpi	2c0 <alt_icache_flush_all>
 148:	00c00034 	movhi	r3,0
 14c:	18c13704 	addi	r3,r3,1244
 150:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 154:	0005883a 	mov	r2,zero
  {
    while( to != end )
 158:	18bff726 	beq	r3,r2,138 <alt_load+0xa4>
    {
      *to++ = *from++;
 15c:	114f883a 	add	r7,r2,r5
 160:	39c00017 	ldw	r7,0(r7)
 164:	110d883a 	add	r6,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	31c00015 	stw	r7,0(r6)
 170:	003ff906 	br	158 <alt_load+0xc4>

00000174 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 174:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 178:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 17c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 180:	00001dc0 	call	1dc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 184:	00001fc0 	call	1fc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 188:	d1a00217 	ldw	r6,-32760(gp)
 18c:	d1600317 	ldw	r5,-32756(gp)
 190:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 194:	dfc00017 	ldw	ra,0(sp)
 198:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 19c:	000003c1 	jmpi	3c <main>

000001a0 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 1a0:	defffe04 	addi	sp,sp,-8
 1a4:	dc000015 	stw	r16,0(sp)
 1a8:	dfc00115 	stw	ra,4(sp)
 1ac:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 1b0:	00002cc0 	call	2cc <strlen>
 1b4:	01000034 	movhi	r4,0
 1b8:	000f883a 	mov	r7,zero
 1bc:	100d883a 	mov	r6,r2
 1c0:	800b883a 	mov	r5,r16
 1c4:	21013704 	addi	r4,r4,1244
#else
    return fputs(str, stdout);
#endif
#endif
}
 1c8:	dfc00117 	ldw	ra,4(sp)
 1cc:	dc000017 	ldw	r16,0(sp)
 1d0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 1d4:	00002001 	jmpi	200 <altera_avalon_jtag_uart_write>

000001d8 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 1d8:	00002341 	jmpi	234 <alt_busy_sleep>

000001dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1dc:	deffff04 	addi	sp,sp,-4
 1e0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS, nios);
 1e4:	00002c40 	call	2c4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1e8:	00800044 	movi	r2,1
 1ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1f0:	dfc00017 	ldw	ra,0(sp)
 1f4:	dec00104 	addi	sp,sp,4
 1f8:	f800283a 	ret

000001fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1fc:	f800283a 	ret

00000200 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 200:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 204:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 208:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 20c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 210:	2980072e 	bgeu	r5,r6,230 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 214:	38c00037 	ldwio	r3,0(r7)
 218:	18ffffec 	andhi	r3,r3,65535
 21c:	183ffc26 	beq	r3,zero,210 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 220:	28c00007 	ldb	r3,0(r5)
 224:	20c00035 	stwio	r3,0(r4)
 228:	29400044 	addi	r5,r5,1
 22c:	003ff806 	br	210 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
 230:	f800283a 	ret

00000234 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 234:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 238:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 23c:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 240:	dc000015 	stw	r16,0(sp)
 244:	dfc00115 	stw	ra,4(sp)
 248:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 24c:	00003e00 	call	3e0 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 250:	10001026 	beq	r2,zero,294 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 254:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 258:	013999b4 	movhi	r4,58982
 25c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 260:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 264:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 268:	297fffc4 	addi	r5,r5,-1
 26c:	283ffe1e 	bne	r5,zero,268 <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 270:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 274:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 278:	18bffb16 	blt	r3,r2,268 <alt_busy_sleep+0x34>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 27c:	01400144 	movi	r5,5
 280:	8009883a 	mov	r4,r16
 284:	000049c0 	call	49c <__mulsi3>
 288:	10bfffc4 	addi	r2,r2,-1
 28c:	103ffe1e 	bne	r2,zero,288 <alt_busy_sleep+0x54>
 290:	00000506 	br	2a8 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 294:	01400144 	movi	r5,5
 298:	8009883a 	mov	r4,r16
 29c:	000049c0 	call	49c <__mulsi3>
 2a0:	10bfffc4 	addi	r2,r2,-1
 2a4:	00bffe16 	blt	zero,r2,2a0 <alt_busy_sleep+0x6c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 2a8:	0005883a 	mov	r2,zero
 2ac:	dfc00117 	ldw	ra,4(sp)
 2b0:	dc000017 	ldw	r16,0(sp)
 2b4:	dec00204 	addi	sp,sp,8
 2b8:	f800283a 	ret

000002bc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2bc:	f800283a 	ret

000002c0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2c0:	f800283a 	ret

000002c4 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 2c4:	000170fa 	wrctl	ienable,zero
 2c8:	f800283a 	ret

000002cc <strlen>:
 2cc:	2005883a 	mov	r2,r4
 2d0:	10c00007 	ldb	r3,0(r2)
 2d4:	18000226 	beq	r3,zero,2e0 <strlen+0x14>
 2d8:	10800044 	addi	r2,r2,1
 2dc:	003ffc06 	br	2d0 <strlen+0x4>
 2e0:	1105c83a 	sub	r2,r2,r4
 2e4:	f800283a 	ret

000002e8 <__divsi3>:
 2e8:	20001b16 	blt	r4,zero,358 <__divsi3+0x70>
 2ec:	000f883a 	mov	r7,zero
 2f0:	28001616 	blt	r5,zero,34c <__divsi3+0x64>
 2f4:	200d883a 	mov	r6,r4
 2f8:	29001a2e 	bgeu	r5,r4,364 <__divsi3+0x7c>
 2fc:	00800804 	movi	r2,32
 300:	00c00044 	movi	r3,1
 304:	00000106 	br	30c <__divsi3+0x24>
 308:	10000d26 	beq	r2,zero,340 <__divsi3+0x58>
 30c:	294b883a 	add	r5,r5,r5
 310:	10bfffc4 	addi	r2,r2,-1
 314:	18c7883a 	add	r3,r3,r3
 318:	293ffb36 	bltu	r5,r4,308 <__divsi3+0x20>
 31c:	0005883a 	mov	r2,zero
 320:	18000726 	beq	r3,zero,340 <__divsi3+0x58>
 324:	0005883a 	mov	r2,zero
 328:	31400236 	bltu	r6,r5,334 <__divsi3+0x4c>
 32c:	314dc83a 	sub	r6,r6,r5
 330:	10c4b03a 	or	r2,r2,r3
 334:	1806d07a 	srli	r3,r3,1
 338:	280ad07a 	srli	r5,r5,1
 33c:	183ffa1e 	bne	r3,zero,328 <__divsi3+0x40>
 340:	38000126 	beq	r7,zero,348 <__divsi3+0x60>
 344:	0085c83a 	sub	r2,zero,r2
 348:	f800283a 	ret
 34c:	014bc83a 	sub	r5,zero,r5
 350:	39c0005c 	xori	r7,r7,1
 354:	003fe706 	br	2f4 <__divsi3+0xc>
 358:	0109c83a 	sub	r4,zero,r4
 35c:	01c00044 	movi	r7,1
 360:	003fe306 	br	2f0 <__divsi3+0x8>
 364:	00c00044 	movi	r3,1
 368:	003fee06 	br	324 <__divsi3+0x3c>

0000036c <__modsi3>:
 36c:	20001716 	blt	r4,zero,3cc <__modsi3+0x60>
 370:	000f883a 	mov	r7,zero
 374:	2005883a 	mov	r2,r4
 378:	28001216 	blt	r5,zero,3c4 <__modsi3+0x58>
 37c:	2900162e 	bgeu	r5,r4,3d8 <__modsi3+0x6c>
 380:	01800804 	movi	r6,32
 384:	00c00044 	movi	r3,1
 388:	00000106 	br	390 <__modsi3+0x24>
 38c:	30000a26 	beq	r6,zero,3b8 <__modsi3+0x4c>
 390:	294b883a 	add	r5,r5,r5
 394:	31bfffc4 	addi	r6,r6,-1
 398:	18c7883a 	add	r3,r3,r3
 39c:	293ffb36 	bltu	r5,r4,38c <__modsi3+0x20>
 3a0:	18000526 	beq	r3,zero,3b8 <__modsi3+0x4c>
 3a4:	1806d07a 	srli	r3,r3,1
 3a8:	11400136 	bltu	r2,r5,3b0 <__modsi3+0x44>
 3ac:	1145c83a 	sub	r2,r2,r5
 3b0:	280ad07a 	srli	r5,r5,1
 3b4:	183ffb1e 	bne	r3,zero,3a4 <__modsi3+0x38>
 3b8:	38000126 	beq	r7,zero,3c0 <__modsi3+0x54>
 3bc:	0085c83a 	sub	r2,zero,r2
 3c0:	f800283a 	ret
 3c4:	014bc83a 	sub	r5,zero,r5
 3c8:	003fec06 	br	37c <__modsi3+0x10>
 3cc:	0109c83a 	sub	r4,zero,r4
 3d0:	01c00044 	movi	r7,1
 3d4:	003fe706 	br	374 <__modsi3+0x8>
 3d8:	00c00044 	movi	r3,1
 3dc:	003ff106 	br	3a4 <__modsi3+0x38>

000003e0 <__udivsi3>:
 3e0:	200d883a 	mov	r6,r4
 3e4:	2900152e 	bgeu	r5,r4,43c <__udivsi3+0x5c>
 3e8:	28001416 	blt	r5,zero,43c <__udivsi3+0x5c>
 3ec:	00800804 	movi	r2,32
 3f0:	00c00044 	movi	r3,1
 3f4:	00000206 	br	400 <__udivsi3+0x20>
 3f8:	10000e26 	beq	r2,zero,434 <__udivsi3+0x54>
 3fc:	28000516 	blt	r5,zero,414 <__udivsi3+0x34>
 400:	294b883a 	add	r5,r5,r5
 404:	10bfffc4 	addi	r2,r2,-1
 408:	18c7883a 	add	r3,r3,r3
 40c:	293ffa36 	bltu	r5,r4,3f8 <__udivsi3+0x18>
 410:	18000826 	beq	r3,zero,434 <__udivsi3+0x54>
 414:	0005883a 	mov	r2,zero
 418:	31400236 	bltu	r6,r5,424 <__udivsi3+0x44>
 41c:	314dc83a 	sub	r6,r6,r5
 420:	10c4b03a 	or	r2,r2,r3
 424:	1806d07a 	srli	r3,r3,1
 428:	280ad07a 	srli	r5,r5,1
 42c:	183ffa1e 	bne	r3,zero,418 <__udivsi3+0x38>
 430:	f800283a 	ret
 434:	0005883a 	mov	r2,zero
 438:	f800283a 	ret
 43c:	00c00044 	movi	r3,1
 440:	003ff406 	br	414 <__udivsi3+0x34>

00000444 <__umodsi3>:
 444:	2005883a 	mov	r2,r4
 448:	2900122e 	bgeu	r5,r4,494 <__umodsi3+0x50>
 44c:	28001116 	blt	r5,zero,494 <__umodsi3+0x50>
 450:	01800804 	movi	r6,32
 454:	00c00044 	movi	r3,1
 458:	00000206 	br	464 <__umodsi3+0x20>
 45c:	30000c26 	beq	r6,zero,490 <__umodsi3+0x4c>
 460:	28000516 	blt	r5,zero,478 <__umodsi3+0x34>
 464:	294b883a 	add	r5,r5,r5
 468:	31bfffc4 	addi	r6,r6,-1
 46c:	18c7883a 	add	r3,r3,r3
 470:	293ffa36 	bltu	r5,r4,45c <__umodsi3+0x18>
 474:	18000626 	beq	r3,zero,490 <__umodsi3+0x4c>
 478:	1806d07a 	srli	r3,r3,1
 47c:	11400136 	bltu	r2,r5,484 <__umodsi3+0x40>
 480:	1145c83a 	sub	r2,r2,r5
 484:	280ad07a 	srli	r5,r5,1
 488:	183ffb1e 	bne	r3,zero,478 <__umodsi3+0x34>
 48c:	f800283a 	ret
 490:	f800283a 	ret
 494:	00c00044 	movi	r3,1
 498:	003ff706 	br	478 <__umodsi3+0x34>

0000049c <__mulsi3>:
 49c:	0005883a 	mov	r2,zero
 4a0:	20000726 	beq	r4,zero,4c0 <__mulsi3+0x24>
 4a4:	20c0004c 	andi	r3,r4,1
 4a8:	2008d07a 	srli	r4,r4,1
 4ac:	18000126 	beq	r3,zero,4b4 <__mulsi3+0x18>
 4b0:	1145883a 	add	r2,r2,r5
 4b4:	294b883a 	add	r5,r5,r5
 4b8:	203ffa1e 	bne	r4,zero,4a4 <__mulsi3+0x8>
 4bc:	f800283a 	ret
 4c0:	f800283a 	ret
