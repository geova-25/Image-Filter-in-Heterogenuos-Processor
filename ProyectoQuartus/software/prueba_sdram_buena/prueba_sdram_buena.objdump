
prueba_sdram_buena.elf:     file format elf32-littlenios2
prueba_sdram_buena.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000524 memsz 0x00000524 flags r-x
    LOAD off    0x00001524 vaddr 0x00000524 paddr 0x00000528 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x0000152c vaddr 0x0000052c paddr 0x0000052c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-
    LOAD off    0x00002000 vaddr 0x04002000 paddr 0x04002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04002000  04002000  00002000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  04002020  04002020  00002020  2**0
                  CONTENTS
  2 .text         0000050c  00000000  00000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  0000050c  0000050c  0000150c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  00000524  00000528  00001524  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  0000052c  0000052c  0000152c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00000538  00000538  00002020  2**0
                  CONTENTS
  7 .onchip       00000000  04002020  04002020  00002020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000001e8  00000000  00000000  00002048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000010ec  00000000  00000000  00002230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000008f7  00000000  00000000  0000331c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000ae4  00000000  00000000  00003c13  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000254  00000000  00000000  000046f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000086b  00000000  00000000  0000494c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000006ea  00000000  00000000  000051b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000058a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000000e8  00000000  00000000  000058e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000068c6  2**0
                  CONTENTS, READONLY
 19 .cpu          00000004  00000000  00000000  000068c9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000068cd  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000068ce  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  000068cf  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  000068da  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  000068e5  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000009  00000000  00000000  000068f0  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000059  00000000  00000000  000068f9  2**0
                  CONTENTS, READONLY
 27 .jdi          0000381f  00000000  00000000  00006952  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00273a61  00000000  00000000  0000a171  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04002000 l    d  .entry	00000000 .entry
04002020 l    d  .exceptions	00000000 .exceptions
00000000 l    d  .text	00000000 .text
0000050c l    d  .rodata	00000000 .rodata
00000524 l    d  .rwdata	00000000 .rwdata
0000052c l    d  .bss	00000000 .bss
00000538 l    d  .sdram	00000000 .sdram
04002020 l    d  .onchip	00000000 .onchip
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../prueba_sdram_buena_bsp//obj/HAL/src/crt0.o
00000038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
000001bc g     F .text	0000002c alt_main
00000528 g       *ABS*	00000000 __flash_rwdata_start
000001e8 g     F .text	00000038 alt_putstr
0000030c g     F .text	00000008 altera_nios2_gen2_irq_init
04002000 g     F .entry	0000000c __reset
00000000 g       *ABS*	00000000 __flash_exceptions_start
00000530 g     O .bss	00000004 alt_argv
00008524 g       *ABS*	00000000 _gp
00000220 g     F .text	00000004 usleep
00000428 g     F .text	00000064 .hidden __udivsi3
00000538 g       *ABS*	00000000 __bss_end
00000304 g     F .text	00000004 alt_dcache_flush_all
00000528 g       *ABS*	00000000 __ram_rwdata_end
00000524 g       *ABS*	00000000 __ram_rodata_end
00000524 g     O .rwdata	00000004 jtag_uart_0
0000048c g     F .text	00000058 .hidden __umodsi3
00000538 g       *ABS*	00000000 end
04000000 g       *ABS*	00000000 __alt_stack_pointer
00000248 g     F .text	00000034 altera_avalon_jtag_uart_write
00000000 g     F .text	0000003c _start
00000244 g     F .text	00000004 alt_sys_init
000004e4 g     F .text	00000028 .hidden __mulsi3
00000524 g       *ABS*	00000000 __ram_rwdata_start
0000050c g       *ABS*	00000000 __ram_rodata_start
0000027c g     F .text	00000088 alt_busy_sleep
00000538 g       *ABS*	00000000 __alt_stack_base
0000052c g       *ABS*	00000000 __bss_start
0000003c g     F .text	000000a0 main
0000052c g     O .bss	00000004 alt_envp
00000330 g     F .text	00000084 .hidden __divsi3
0000050c g       *ABS*	00000000 __flash_rodata_start
00000224 g     F .text	00000020 alt_irq_init
00000534 g     O .bss	00000004 alt_argc
04002020 g       *ABS*	00000000 __ram_exceptions_start
00000528 g       *ABS*	00000000 _edata
00000538 g       *ABS*	00000000 _end
04002020 g       *ABS*	00000000 __ram_exceptions_end
04002000 g       *ABS*	00000000 __alt_mem_onchip
000003b4 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000000 g       *ABS*	00000000 __alt_mem_sdram
0400200c g       .entry	00000000 _exit
00000314 g     F .text	0000001c strlen
00000308 g     F .text	00000004 alt_icache_flush_all
000000dc g     F .text	000000e0 alt_load



Disassembly of section .entry:

04002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4002000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
 4002004:	08400014 	ori	at,at,0
    jmp r1
 4002008:	0800683a 	jmp	at

0400200c <_exit>:
	...

Disassembly of section .text:

00000000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   0:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
   4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   8:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
   c:	d6a14914 	ori	gp,gp,34084
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  10:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  14:	10814b14 	ori	r2,r2,1324

    movhi r3, %hi(__bss_end)
  18:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  1c:	18c14e14 	ori	r3,r3,1336

    beq r2, r3, 1f
  20:	10c00326 	beq	r2,r3,30 <_start+0x30>

0:
    stw zero, (r2)
  24:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  28:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  2c:	10fffd36 	bltu	r2,r3,24 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  30:	00000dc0 	call	dc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  34:	00001bc0 	call	1bc <alt_main>

00000038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  38:	003fff06 	br	38 <alt_after_alt_main>

0000003c <main>:
#include "sys/alt_stdio.h"
#include "system.h"
#include "unistd.h"
int main()
{ 
  alt_putstr("Hello from Nios II!\n");
  3c:	01000034 	movhi	r4,0

#include "sys/alt_stdio.h"
#include "system.h"
#include "unistd.h"
int main()
{ 
  40:	defffd04 	addi	sp,sp,-12
  alt_putstr("Hello from Nios II!\n");
  44:	21014304 	addi	r4,r4,1292

#include "sys/alt_stdio.h"
#include "system.h"
#include "unistd.h"
int main()
{ 
  48:	dc400115 	stw	r17,4(sp)
  4c:	dc000015 	stw	r16,0(sp)
  50:	dfc00215 	stw	ra,8(sp)
  alt_putstr("Hello from Nios II!\n");
 // int* sdram_base =  SDRAM_BASE;
  int* sdram_base =  0x407FFFF;
  int* led_base = LEDS_BASE;
  *sdram_base = 5;
  54:	04010234 	movhi	r16,1032
#include "sys/alt_stdio.h"
#include "system.h"
#include "unistd.h"
int main()
{ 
  alt_putstr("Hello from Nios II!\n");
  58:	00001e80 	call	1e8 <alt_putstr>
 // int* sdram_base =  SDRAM_BASE;
  int* sdram_base =  0x407FFFF;
  int* led_base = LEDS_BASE;
  *sdram_base = 5;
  5c:	843fffc4 	addi	r16,r16,-1
  60:	00800144 	movi	r2,5
  64:	80800005 	stb	r2,0(r16)
  68:	80000045 	stb	zero,1(r16)
  6c:	80000085 	stb	zero,2(r16)
  70:	800000c5 	stb	zero,3(r16)
  /* Event loop never exits. */
  while (1){
	  alt_putstr("Hello from Nios II!\n");
	  *sdram_base =*sdram_base + 1;
	  *led_base = * sdram_base;
  74:	04410034 	movhi	r17,1024
  int* sdram_base =  0x407FFFF;
  int* led_base = LEDS_BASE;
  *sdram_base = 5;
  /* Event loop never exits. */
  while (1){
	  alt_putstr("Hello from Nios II!\n");
  78:	01000034 	movhi	r4,0
  7c:	21014304 	addi	r4,r4,1292
  80:	00001e80 	call	1e8 <alt_putstr>
	  *sdram_base =*sdram_base + 1;
  84:	80c00043 	ldbu	r3,1(r16)
  88:	80800083 	ldbu	r2,2(r16)
  8c:	81400003 	ldbu	r5,0(r16)
  90:	1806923a 	slli	r3,r3,8
  94:	1004943a 	slli	r2,r2,16
  98:	1948b03a 	or	r4,r3,r5
  9c:	1106b03a 	or	r3,r2,r4
  a0:	808000c3 	ldbu	r2,3(r16)
	  *led_base = * sdram_base;
	  usleep(1000);
  a4:	0100fa04 	movi	r4,1000
  int* led_base = LEDS_BASE;
  *sdram_base = 5;
  /* Event loop never exits. */
  while (1){
	  alt_putstr("Hello from Nios II!\n");
	  *sdram_base =*sdram_base + 1;
  a8:	1004963a 	slli	r2,r2,24
  ac:	10c4b03a 	or	r2,r2,r3
  b0:	10800044 	addi	r2,r2,1
  b4:	1006d23a 	srli	r3,r2,8
  b8:	80800005 	stb	r2,0(r16)
  bc:	80c00045 	stb	r3,1(r16)
  c0:	1006d43a 	srli	r3,r2,16
  c4:	80c00085 	stb	r3,2(r16)
  c8:	1006d63a 	srli	r3,r2,24
  cc:	80c000c5 	stb	r3,3(r16)
	  *led_base = * sdram_base;
  d0:	88800015 	stw	r2,0(r17)
	  usleep(1000);
  d4:	00002200 	call	220 <usleep>
  d8:	003fe706 	br	78 <main+0x3c>

000000dc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  dc:	deffff04 	addi	sp,sp,-4
  e0:	01000034 	movhi	r4,0
  e4:	01400034 	movhi	r5,0
  e8:	dfc00015 	stw	ra,0(sp)
  ec:	21014904 	addi	r4,r4,1316
  f0:	29414a04 	addi	r5,r5,1320

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  f4:	2140061e 	bne	r4,r5,110 <alt_load+0x34>
  f8:	01010034 	movhi	r4,1024
  fc:	01400034 	movhi	r5,0
 100:	21080804 	addi	r4,r4,8224
 104:	29400004 	addi	r5,r5,0
 108:	2140121e 	bne	r4,r5,154 <alt_load+0x78>
 10c:	00000b06 	br	13c <alt_load+0x60>
 110:	00c00034 	movhi	r3,0
 114:	18c14a04 	addi	r3,r3,1320
 118:	1907c83a 	sub	r3,r3,r4
 11c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 120:	10fff526 	beq	r2,r3,f8 <alt_load+0x1c>
    {
      *to++ = *from++;
 124:	114f883a 	add	r7,r2,r5
 128:	39c00017 	ldw	r7,0(r7)
 12c:	110d883a 	add	r6,r2,r4
 130:	10800104 	addi	r2,r2,4
 134:	31c00015 	stw	r7,0(r6)
 138:	003ff906 	br	120 <alt_load+0x44>
 13c:	01000034 	movhi	r4,0
 140:	01400034 	movhi	r5,0
 144:	21014304 	addi	r4,r4,1292
 148:	29414304 	addi	r5,r5,1292

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 14c:	2140101e 	bne	r4,r5,190 <alt_load+0xb4>
 150:	00000b06 	br	180 <alt_load+0xa4>
 154:	00c10034 	movhi	r3,1024
 158:	18c80804 	addi	r3,r3,8224
 15c:	1907c83a 	sub	r3,r3,r4
 160:	0005883a 	mov	r2,zero
  {
    while( to != end )
 164:	10fff526 	beq	r2,r3,13c <alt_load+0x60>
    {
      *to++ = *from++;
 168:	114f883a 	add	r7,r2,r5
 16c:	39c00017 	ldw	r7,0(r7)
 170:	110d883a 	add	r6,r2,r4
 174:	10800104 	addi	r2,r2,4
 178:	31c00015 	stw	r7,0(r6)
 17c:	003ff906 	br	164 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 180:	00003040 	call	304 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 184:	dfc00017 	ldw	ra,0(sp)
 188:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 18c:	00003081 	jmpi	308 <alt_icache_flush_all>
 190:	00c00034 	movhi	r3,0
 194:	18c14904 	addi	r3,r3,1316
 198:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 19c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 1a0:	18bff726 	beq	r3,r2,180 <alt_load+0xa4>
    {
      *to++ = *from++;
 1a4:	114f883a 	add	r7,r2,r5
 1a8:	39c00017 	ldw	r7,0(r7)
 1ac:	110d883a 	add	r6,r2,r4
 1b0:	10800104 	addi	r2,r2,4
 1b4:	31c00015 	stw	r7,0(r6)
 1b8:	003ff906 	br	1a0 <alt_load+0xc4>

000001bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1bc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1c0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1c4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1c8:	00002240 	call	224 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1cc:	00002440 	call	244 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 1d0:	d1a00217 	ldw	r6,-32760(gp)
 1d4:	d1600317 	ldw	r5,-32756(gp)
 1d8:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 1dc:	dfc00017 	ldw	ra,0(sp)
 1e0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 1e4:	000003c1 	jmpi	3c <main>

000001e8 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 1e8:	defffe04 	addi	sp,sp,-8
 1ec:	dc000015 	stw	r16,0(sp)
 1f0:	dfc00115 	stw	ra,4(sp)
 1f4:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 1f8:	00003140 	call	314 <strlen>
 1fc:	01000034 	movhi	r4,0
 200:	000f883a 	mov	r7,zero
 204:	100d883a 	mov	r6,r2
 208:	800b883a 	mov	r5,r16
 20c:	21014904 	addi	r4,r4,1316
#else
    return fputs(str, stdout);
#endif
#endif
}
 210:	dfc00117 	ldw	ra,4(sp)
 214:	dc000017 	ldw	r16,0(sp)
 218:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 21c:	00002481 	jmpi	248 <altera_avalon_jtag_uart_write>

00000220 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 220:	000027c1 	jmpi	27c <alt_busy_sleep>

00000224 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 224:	deffff04 	addi	sp,sp,-4
 228:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS, nios);
 22c:	000030c0 	call	30c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 230:	00800044 	movi	r2,1
 234:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 238:	dfc00017 	ldw	ra,0(sp)
 23c:	dec00104 	addi	sp,sp,4
 240:	f800283a 	ret

00000244 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 244:	f800283a 	ret

00000248 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 248:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 24c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 250:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 254:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 258:	2980072e 	bgeu	r5,r6,278 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 25c:	38c00037 	ldwio	r3,0(r7)
 260:	18ffffec 	andhi	r3,r3,65535
 264:	183ffc26 	beq	r3,zero,258 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 268:	28c00007 	ldb	r3,0(r5)
 26c:	20c00035 	stwio	r3,0(r4)
 270:	29400044 	addi	r5,r5,1
 274:	003ff806 	br	258 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
 278:	f800283a 	ret

0000027c <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 27c:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 280:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 284:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 288:	dc000015 	stw	r16,0(sp)
 28c:	dfc00115 	stw	ra,4(sp)
 290:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 294:	00004280 	call	428 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 298:	10001026 	beq	r2,zero,2dc <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 29c:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 2a0:	013999b4 	movhi	r4,58982
 2a4:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 2a8:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 2ac:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 2b0:	297fffc4 	addi	r5,r5,-1
 2b4:	283ffe1e 	bne	r5,zero,2b0 <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 2b8:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 2bc:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 2c0:	18bffb16 	blt	r3,r2,2b0 <alt_busy_sleep+0x34>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2c4:	01400144 	movi	r5,5
 2c8:	8009883a 	mov	r4,r16
 2cc:	00004e40 	call	4e4 <__mulsi3>
 2d0:	10bfffc4 	addi	r2,r2,-1
 2d4:	103ffe1e 	bne	r2,zero,2d0 <alt_busy_sleep+0x54>
 2d8:	00000506 	br	2f0 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2dc:	01400144 	movi	r5,5
 2e0:	8009883a 	mov	r4,r16
 2e4:	00004e40 	call	4e4 <__mulsi3>
 2e8:	10bfffc4 	addi	r2,r2,-1
 2ec:	00bffe16 	blt	zero,r2,2e8 <alt_busy_sleep+0x6c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 2f0:	0005883a 	mov	r2,zero
 2f4:	dfc00117 	ldw	ra,4(sp)
 2f8:	dc000017 	ldw	r16,0(sp)
 2fc:	dec00204 	addi	sp,sp,8
 300:	f800283a 	ret

00000304 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 304:	f800283a 	ret

00000308 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 308:	f800283a 	ret

0000030c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 30c:	000170fa 	wrctl	ienable,zero
 310:	f800283a 	ret

00000314 <strlen>:
 314:	2005883a 	mov	r2,r4
 318:	10c00007 	ldb	r3,0(r2)
 31c:	18000226 	beq	r3,zero,328 <strlen+0x14>
 320:	10800044 	addi	r2,r2,1
 324:	003ffc06 	br	318 <strlen+0x4>
 328:	1105c83a 	sub	r2,r2,r4
 32c:	f800283a 	ret

00000330 <__divsi3>:
 330:	20001b16 	blt	r4,zero,3a0 <__divsi3+0x70>
 334:	000f883a 	mov	r7,zero
 338:	28001616 	blt	r5,zero,394 <__divsi3+0x64>
 33c:	200d883a 	mov	r6,r4
 340:	29001a2e 	bgeu	r5,r4,3ac <__divsi3+0x7c>
 344:	00800804 	movi	r2,32
 348:	00c00044 	movi	r3,1
 34c:	00000106 	br	354 <__divsi3+0x24>
 350:	10000d26 	beq	r2,zero,388 <__divsi3+0x58>
 354:	294b883a 	add	r5,r5,r5
 358:	10bfffc4 	addi	r2,r2,-1
 35c:	18c7883a 	add	r3,r3,r3
 360:	293ffb36 	bltu	r5,r4,350 <__divsi3+0x20>
 364:	0005883a 	mov	r2,zero
 368:	18000726 	beq	r3,zero,388 <__divsi3+0x58>
 36c:	0005883a 	mov	r2,zero
 370:	31400236 	bltu	r6,r5,37c <__divsi3+0x4c>
 374:	314dc83a 	sub	r6,r6,r5
 378:	10c4b03a 	or	r2,r2,r3
 37c:	1806d07a 	srli	r3,r3,1
 380:	280ad07a 	srli	r5,r5,1
 384:	183ffa1e 	bne	r3,zero,370 <__divsi3+0x40>
 388:	38000126 	beq	r7,zero,390 <__divsi3+0x60>
 38c:	0085c83a 	sub	r2,zero,r2
 390:	f800283a 	ret
 394:	014bc83a 	sub	r5,zero,r5
 398:	39c0005c 	xori	r7,r7,1
 39c:	003fe706 	br	33c <__divsi3+0xc>
 3a0:	0109c83a 	sub	r4,zero,r4
 3a4:	01c00044 	movi	r7,1
 3a8:	003fe306 	br	338 <__divsi3+0x8>
 3ac:	00c00044 	movi	r3,1
 3b0:	003fee06 	br	36c <__divsi3+0x3c>

000003b4 <__modsi3>:
 3b4:	20001716 	blt	r4,zero,414 <__modsi3+0x60>
 3b8:	000f883a 	mov	r7,zero
 3bc:	2005883a 	mov	r2,r4
 3c0:	28001216 	blt	r5,zero,40c <__modsi3+0x58>
 3c4:	2900162e 	bgeu	r5,r4,420 <__modsi3+0x6c>
 3c8:	01800804 	movi	r6,32
 3cc:	00c00044 	movi	r3,1
 3d0:	00000106 	br	3d8 <__modsi3+0x24>
 3d4:	30000a26 	beq	r6,zero,400 <__modsi3+0x4c>
 3d8:	294b883a 	add	r5,r5,r5
 3dc:	31bfffc4 	addi	r6,r6,-1
 3e0:	18c7883a 	add	r3,r3,r3
 3e4:	293ffb36 	bltu	r5,r4,3d4 <__modsi3+0x20>
 3e8:	18000526 	beq	r3,zero,400 <__modsi3+0x4c>
 3ec:	1806d07a 	srli	r3,r3,1
 3f0:	11400136 	bltu	r2,r5,3f8 <__modsi3+0x44>
 3f4:	1145c83a 	sub	r2,r2,r5
 3f8:	280ad07a 	srli	r5,r5,1
 3fc:	183ffb1e 	bne	r3,zero,3ec <__modsi3+0x38>
 400:	38000126 	beq	r7,zero,408 <__modsi3+0x54>
 404:	0085c83a 	sub	r2,zero,r2
 408:	f800283a 	ret
 40c:	014bc83a 	sub	r5,zero,r5
 410:	003fec06 	br	3c4 <__modsi3+0x10>
 414:	0109c83a 	sub	r4,zero,r4
 418:	01c00044 	movi	r7,1
 41c:	003fe706 	br	3bc <__modsi3+0x8>
 420:	00c00044 	movi	r3,1
 424:	003ff106 	br	3ec <__modsi3+0x38>

00000428 <__udivsi3>:
 428:	200d883a 	mov	r6,r4
 42c:	2900152e 	bgeu	r5,r4,484 <__udivsi3+0x5c>
 430:	28001416 	blt	r5,zero,484 <__udivsi3+0x5c>
 434:	00800804 	movi	r2,32
 438:	00c00044 	movi	r3,1
 43c:	00000206 	br	448 <__udivsi3+0x20>
 440:	10000e26 	beq	r2,zero,47c <__udivsi3+0x54>
 444:	28000516 	blt	r5,zero,45c <__udivsi3+0x34>
 448:	294b883a 	add	r5,r5,r5
 44c:	10bfffc4 	addi	r2,r2,-1
 450:	18c7883a 	add	r3,r3,r3
 454:	293ffa36 	bltu	r5,r4,440 <__udivsi3+0x18>
 458:	18000826 	beq	r3,zero,47c <__udivsi3+0x54>
 45c:	0005883a 	mov	r2,zero
 460:	31400236 	bltu	r6,r5,46c <__udivsi3+0x44>
 464:	314dc83a 	sub	r6,r6,r5
 468:	10c4b03a 	or	r2,r2,r3
 46c:	1806d07a 	srli	r3,r3,1
 470:	280ad07a 	srli	r5,r5,1
 474:	183ffa1e 	bne	r3,zero,460 <__udivsi3+0x38>
 478:	f800283a 	ret
 47c:	0005883a 	mov	r2,zero
 480:	f800283a 	ret
 484:	00c00044 	movi	r3,1
 488:	003ff406 	br	45c <__udivsi3+0x34>

0000048c <__umodsi3>:
 48c:	2005883a 	mov	r2,r4
 490:	2900122e 	bgeu	r5,r4,4dc <__umodsi3+0x50>
 494:	28001116 	blt	r5,zero,4dc <__umodsi3+0x50>
 498:	01800804 	movi	r6,32
 49c:	00c00044 	movi	r3,1
 4a0:	00000206 	br	4ac <__umodsi3+0x20>
 4a4:	30000c26 	beq	r6,zero,4d8 <__umodsi3+0x4c>
 4a8:	28000516 	blt	r5,zero,4c0 <__umodsi3+0x34>
 4ac:	294b883a 	add	r5,r5,r5
 4b0:	31bfffc4 	addi	r6,r6,-1
 4b4:	18c7883a 	add	r3,r3,r3
 4b8:	293ffa36 	bltu	r5,r4,4a4 <__umodsi3+0x18>
 4bc:	18000626 	beq	r3,zero,4d8 <__umodsi3+0x4c>
 4c0:	1806d07a 	srli	r3,r3,1
 4c4:	11400136 	bltu	r2,r5,4cc <__umodsi3+0x40>
 4c8:	1145c83a 	sub	r2,r2,r5
 4cc:	280ad07a 	srli	r5,r5,1
 4d0:	183ffb1e 	bne	r3,zero,4c0 <__umodsi3+0x34>
 4d4:	f800283a 	ret
 4d8:	f800283a 	ret
 4dc:	00c00044 	movi	r3,1
 4e0:	003ff706 	br	4c0 <__umodsi3+0x34>

000004e4 <__mulsi3>:
 4e4:	0005883a 	mov	r2,zero
 4e8:	20000726 	beq	r4,zero,508 <__mulsi3+0x24>
 4ec:	20c0004c 	andi	r3,r4,1
 4f0:	2008d07a 	srli	r4,r4,1
 4f4:	18000126 	beq	r3,zero,4fc <__mulsi3+0x18>
 4f8:	1145883a 	add	r2,r2,r5
 4fc:	294b883a 	add	r5,r5,r5
 500:	203ffa1e 	bne	r4,zero,4ec <__mulsi3+0x8>
 504:	f800283a 	ret
 508:	f800283a 	ret
