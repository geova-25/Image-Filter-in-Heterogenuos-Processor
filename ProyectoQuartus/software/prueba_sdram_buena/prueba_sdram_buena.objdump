
prueba_sdram_buena.elf:     file format elf32-littlenios2
prueba_sdram_buena.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000000

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00002000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000524 memsz 0x00000524 flags r-x
    LOAD off    0x00002524 vaddr 0x08000524 paddr 0x08000528 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x0000252c vaddr 0x0800052c paddr 0x0800052c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00002020  00002020  00002528  2**0
                  CONTENTS
  2 .text         0000050c  08000000  08000000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  0800050c  0800050c  0000250c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  08000524  08000528  00002524  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  0800052c  0800052c  0000252c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip       00000000  00002020  00002020  00002528  2**0
                  CONTENTS
  7 .sdram        00000000  08000538  08000538  00002528  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000001e8  00000000  00000000  00002550  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000010e9  00000000  00000000  00002738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000906  00000000  00000000  00003821  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000ae4  00000000  00000000  00004127  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000254  00000000  00000000  00004c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000086b  00000000  00000000  00004e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000006ea  00000000  00000000  000056cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00005db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000000e8  00000000  00000000  00005df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00006dd6  2**0
                  CONTENTS, READONLY
 19 .cpu          00000004  00000000  00000000  00006dd9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00006ddd  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00006dde  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00006ddf  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00006dea  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00006df5  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000009  00000000  00000000  00006e00  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000059  00000000  00000000  00006e09  2**0
                  CONTENTS, READONLY
 27 .jdi          0000381f  00000000  00000000  00006e62  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     002802da  00000000  00000000  0000a681  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .exceptions	00000000 .exceptions
08000000 l    d  .text	00000000 .text
0800050c l    d  .rodata	00000000 .rodata
08000524 l    d  .rwdata	00000000 .rwdata
0800052c l    d  .bss	00000000 .bss
00002020 l    d  .onchip	00000000 .onchip
08000538 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../prueba_sdram_buena_bsp//obj/HAL/src/crt0.o
08000038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
080001bc g     F .text	0000002c alt_main
08000528 g       *ABS*	00000000 __flash_rwdata_start
080001e8 g     F .text	00000038 alt_putstr
0800030c g     F .text	00000008 altera_nios2_gen2_irq_init
00002000 g     F .entry	0000000c __reset
08000000 g       *ABS*	00000000 __flash_exceptions_start
08000530 g     O .bss	00000004 alt_argv
08008524 g       *ABS*	00000000 _gp
08000220 g     F .text	00000004 usleep
08000428 g     F .text	00000064 .hidden __udivsi3
08000538 g       *ABS*	00000000 __bss_end
08000304 g     F .text	00000004 alt_dcache_flush_all
08000528 g       *ABS*	00000000 __ram_rwdata_end
08000524 g       *ABS*	00000000 __ram_rodata_end
08000524 g     O .rwdata	00000004 jtag_uart_0
0800048c g     F .text	00000058 .hidden __umodsi3
08000538 g       *ABS*	00000000 end
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08000248 g     F .text	00000034 altera_avalon_jtag_uart_write
08000000 g     F .text	0000003c _start
08000244 g     F .text	00000004 alt_sys_init
080004e4 g     F .text	00000028 .hidden __mulsi3
08000524 g       *ABS*	00000000 __ram_rwdata_start
0800050c g       *ABS*	00000000 __ram_rodata_start
0800027c g     F .text	00000088 alt_busy_sleep
08000538 g       *ABS*	00000000 __alt_stack_base
0800052c g       *ABS*	00000000 __bss_start
0800003c g     F .text	000000a0 main
0800052c g     O .bss	00000004 alt_envp
08000330 g     F .text	00000084 .hidden __divsi3
0800050c g       *ABS*	00000000 __flash_rodata_start
08000224 g     F .text	00000020 alt_irq_init
08000534 g     O .bss	00000004 alt_argc
00002020 g       *ABS*	00000000 __ram_exceptions_start
08000528 g       *ABS*	00000000 _edata
08000538 g       *ABS*	00000000 _end
00002020 g       *ABS*	00000000 __ram_exceptions_end
00002000 g       *ABS*	00000000 __alt_mem_onchip
080003b4 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000000 g       *ABS*	00000000 __alt_mem_sdram
0000200c g       .entry	00000000 _exit
08000314 g     F .text	0000001c strlen
08000308 g     F .text	00000004 alt_icache_flush_all
080000dc g     F .text	000000e0 alt_load



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
    2004:	08400014 	ori	at,at,0
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .text:

08000000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000000:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000008:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 800000c:	d6a14914 	ori	gp,gp,34084
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000010:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000014:	10814b14 	ori	r2,r2,1324

    movhi r3, %hi(__bss_end)
 8000018:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 800001c:	18c14e14 	ori	r3,r3,1336

    beq r2, r3, 1f
 8000020:	10c00326 	beq	r2,r3,8000030 <_start+0x30>

0:
    stw zero, (r2)
 8000024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800002c:	10fffd36 	bltu	r2,r3,8000024 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000030:	80000dc0 	call	80000dc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000034:	80001bc0 	call	80001bc <alt_main>

08000038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000038:	003fff06 	br	8000038 <alt_after_alt_main>

0800003c <main>:
#include "sys/alt_stdio.h"
#include "system.h"
#include "unistd.h"
int main()
{ 
  alt_putstr("Hello from Nios II!\n");
 800003c:	01020034 	movhi	r4,2048

#include "sys/alt_stdio.h"
#include "system.h"
#include "unistd.h"
int main()
{ 
 8000040:	defffd04 	addi	sp,sp,-12
  alt_putstr("Hello from Nios II!\n");
 8000044:	21014304 	addi	r4,r4,1292

#include "sys/alt_stdio.h"
#include "system.h"
#include "unistd.h"
int main()
{ 
 8000048:	dc400115 	stw	r17,4(sp)
 800004c:	dc000015 	stw	r16,0(sp)
 8000050:	dfc00215 	stw	ra,8(sp)
  alt_putstr("Hello from Nios II!\n");
 // int* sdram_base =  SDRAM_BASE;
  int* sdram_base =  0x407FFFF;
  int* led_base = LEDS_BASE;
  *sdram_base = 5;
 8000054:	04010234 	movhi	r16,1032
#include "sys/alt_stdio.h"
#include "system.h"
#include "unistd.h"
int main()
{ 
  alt_putstr("Hello from Nios II!\n");
 8000058:	80001e80 	call	80001e8 <alt_putstr>
 // int* sdram_base =  SDRAM_BASE;
  int* sdram_base =  0x407FFFF;
  int* led_base = LEDS_BASE;
  *sdram_base = 5;
 800005c:	843fffc4 	addi	r16,r16,-1
 8000060:	00800144 	movi	r2,5
 8000064:	80800005 	stb	r2,0(r16)
 8000068:	80000045 	stb	zero,1(r16)
 800006c:	80000085 	stb	zero,2(r16)
 8000070:	800000c5 	stb	zero,3(r16)
  /* Event loop never exits. */
  while (1){
	  alt_putstr("Hello from Nios II!\n");
	  *sdram_base =*sdram_base + 1;
 8000074:	0023883a 	mov	r17,zero
  int* sdram_base =  0x407FFFF;
  int* led_base = LEDS_BASE;
  *sdram_base = 5;
  /* Event loop never exits. */
  while (1){
	  alt_putstr("Hello from Nios II!\n");
 8000078:	01020034 	movhi	r4,2048
 800007c:	21014304 	addi	r4,r4,1292
 8000080:	80001e80 	call	80001e8 <alt_putstr>
	  *sdram_base =*sdram_base + 1;
 8000084:	80c00043 	ldbu	r3,1(r16)
 8000088:	80800083 	ldbu	r2,2(r16)
 800008c:	81400003 	ldbu	r5,0(r16)
 8000090:	1806923a 	slli	r3,r3,8
 8000094:	1004943a 	slli	r2,r2,16
 8000098:	1948b03a 	or	r4,r3,r5
 800009c:	1106b03a 	or	r3,r2,r4
 80000a0:	808000c3 	ldbu	r2,3(r16)
	  *led_base = * sdram_base;
	  usleep(1000);
 80000a4:	0100fa04 	movi	r4,1000
  int* led_base = LEDS_BASE;
  *sdram_base = 5;
  /* Event loop never exits. */
  while (1){
	  alt_putstr("Hello from Nios II!\n");
	  *sdram_base =*sdram_base + 1;
 80000a8:	1004963a 	slli	r2,r2,24
 80000ac:	10c4b03a 	or	r2,r2,r3
 80000b0:	10800044 	addi	r2,r2,1
 80000b4:	1006d23a 	srli	r3,r2,8
 80000b8:	80800005 	stb	r2,0(r16)
 80000bc:	80c00045 	stb	r3,1(r16)
 80000c0:	1006d43a 	srli	r3,r2,16
 80000c4:	80c00085 	stb	r3,2(r16)
 80000c8:	1006d63a 	srli	r3,r2,24
 80000cc:	80c000c5 	stb	r3,3(r16)
	  *led_base = * sdram_base;
 80000d0:	88800015 	stw	r2,0(r17)
	  usleep(1000);
 80000d4:	80002200 	call	8000220 <usleep>
 80000d8:	003fe706 	br	8000078 <main+0x3c>

080000dc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80000dc:	deffff04 	addi	sp,sp,-4
 80000e0:	01020034 	movhi	r4,2048
 80000e4:	01420034 	movhi	r5,2048
 80000e8:	dfc00015 	stw	ra,0(sp)
 80000ec:	21014904 	addi	r4,r4,1316
 80000f0:	29414a04 	addi	r5,r5,1320

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 80000f4:	2140061e 	bne	r4,r5,8000110 <alt_load+0x34>
 80000f8:	01000034 	movhi	r4,0
 80000fc:	01420034 	movhi	r5,2048
 8000100:	21080804 	addi	r4,r4,8224
 8000104:	29400004 	addi	r5,r5,0
 8000108:	2140121e 	bne	r4,r5,8000154 <alt_load+0x78>
 800010c:	00000b06 	br	800013c <alt_load+0x60>
 8000110:	00c20034 	movhi	r3,2048
 8000114:	18c14a04 	addi	r3,r3,1320
 8000118:	1907c83a 	sub	r3,r3,r4
 800011c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8000120:	10fff526 	beq	r2,r3,80000f8 <alt_load+0x1c>
    {
      *to++ = *from++;
 8000124:	114f883a 	add	r7,r2,r5
 8000128:	39c00017 	ldw	r7,0(r7)
 800012c:	110d883a 	add	r6,r2,r4
 8000130:	10800104 	addi	r2,r2,4
 8000134:	31c00015 	stw	r7,0(r6)
 8000138:	003ff906 	br	8000120 <alt_load+0x44>
 800013c:	01020034 	movhi	r4,2048
 8000140:	01420034 	movhi	r5,2048
 8000144:	21014304 	addi	r4,r4,1292
 8000148:	29414304 	addi	r5,r5,1292

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 800014c:	2140101e 	bne	r4,r5,8000190 <alt_load+0xb4>
 8000150:	00000b06 	br	8000180 <alt_load+0xa4>
 8000154:	00c00034 	movhi	r3,0
 8000158:	18c80804 	addi	r3,r3,8224
 800015c:	1907c83a 	sub	r3,r3,r4
 8000160:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8000164:	10fff526 	beq	r2,r3,800013c <alt_load+0x60>
    {
      *to++ = *from++;
 8000168:	114f883a 	add	r7,r2,r5
 800016c:	39c00017 	ldw	r7,0(r7)
 8000170:	110d883a 	add	r6,r2,r4
 8000174:	10800104 	addi	r2,r2,4
 8000178:	31c00015 	stw	r7,0(r6)
 800017c:	003ff906 	br	8000164 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8000180:	80003040 	call	8000304 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 8000184:	dfc00017 	ldw	ra,0(sp)
 8000188:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 800018c:	80003081 	jmpi	8000308 <alt_icache_flush_all>
 8000190:	00c20034 	movhi	r3,2048
 8000194:	18c14904 	addi	r3,r3,1316
 8000198:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 800019c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 80001a0:	18bff726 	beq	r3,r2,8000180 <alt_load+0xa4>
    {
      *to++ = *from++;
 80001a4:	114f883a 	add	r7,r2,r5
 80001a8:	39c00017 	ldw	r7,0(r7)
 80001ac:	110d883a 	add	r6,r2,r4
 80001b0:	10800104 	addi	r2,r2,4
 80001b4:	31c00015 	stw	r7,0(r6)
 80001b8:	003ff906 	br	80001a0 <alt_load+0xc4>

080001bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80001bc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 80001c0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80001c4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 80001c8:	80002240 	call	8000224 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80001cc:	80002440 	call	8000244 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 80001d0:	d1a00217 	ldw	r6,-32760(gp)
 80001d4:	d1600317 	ldw	r5,-32756(gp)
 80001d8:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 80001dc:	dfc00017 	ldw	ra,0(sp)
 80001e0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 80001e4:	800003c1 	jmpi	800003c <main>

080001e8 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 80001e8:	defffe04 	addi	sp,sp,-8
 80001ec:	dc000015 	stw	r16,0(sp)
 80001f0:	dfc00115 	stw	ra,4(sp)
 80001f4:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 80001f8:	80003140 	call	8000314 <strlen>
 80001fc:	01020034 	movhi	r4,2048
 8000200:	000f883a 	mov	r7,zero
 8000204:	100d883a 	mov	r6,r2
 8000208:	800b883a 	mov	r5,r16
 800020c:	21014904 	addi	r4,r4,1316
#else
    return fputs(str, stdout);
#endif
#endif
}
 8000210:	dfc00117 	ldw	ra,4(sp)
 8000214:	dc000017 	ldw	r16,0(sp)
 8000218:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 800021c:	80002481 	jmpi	8000248 <altera_avalon_jtag_uart_write>

08000220 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 8000220:	800027c1 	jmpi	800027c <alt_busy_sleep>

08000224 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8000224:	deffff04 	addi	sp,sp,-4
 8000228:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS, nios);
 800022c:	800030c0 	call	800030c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8000230:	00800044 	movi	r2,1
 8000234:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8000238:	dfc00017 	ldw	ra,0(sp)
 800023c:	dec00104 	addi	sp,sp,4
 8000240:	f800283a 	ret

08000244 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8000244:	f800283a 	ret

08000248 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 8000248:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800024c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 8000250:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 8000254:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 8000258:	2980072e 	bgeu	r5,r6,8000278 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 800025c:	38c00037 	ldwio	r3,0(r7)
 8000260:	18ffffec 	andhi	r3,r3,65535
 8000264:	183ffc26 	beq	r3,zero,8000258 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 8000268:	28c00007 	ldb	r3,0(r5)
 800026c:	20c00035 	stwio	r3,0(r4)
 8000270:	29400044 	addi	r5,r5,1
 8000274:	003ff806 	br	8000258 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
 8000278:	f800283a 	ret

0800027c <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 800027c:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8000280:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8000284:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8000288:	dc000015 	stw	r16,0(sp)
 800028c:	dfc00115 	stw	ra,4(sp)
 8000290:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8000294:	80004280 	call	8000428 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8000298:	10001026 	beq	r2,zero,80002dc <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 800029c:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 80002a0:	013999b4 	movhi	r4,58982
 80002a4:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 80002a8:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 80002ac:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 80002b0:	297fffc4 	addi	r5,r5,-1
 80002b4:	283ffe1e 	bne	r5,zero,80002b0 <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 80002b8:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 80002bc:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 80002c0:	18bffb16 	blt	r3,r2,80002b0 <alt_busy_sleep+0x34>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80002c4:	01400144 	movi	r5,5
 80002c8:	8009883a 	mov	r4,r16
 80002cc:	80004e40 	call	80004e4 <__mulsi3>
 80002d0:	10bfffc4 	addi	r2,r2,-1
 80002d4:	103ffe1e 	bne	r2,zero,80002d0 <alt_busy_sleep+0x54>
 80002d8:	00000506 	br	80002f0 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80002dc:	01400144 	movi	r5,5
 80002e0:	8009883a 	mov	r4,r16
 80002e4:	80004e40 	call	80004e4 <__mulsi3>
 80002e8:	10bfffc4 	addi	r2,r2,-1
 80002ec:	00bffe16 	blt	zero,r2,80002e8 <alt_busy_sleep+0x6c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 80002f0:	0005883a 	mov	r2,zero
 80002f4:	dfc00117 	ldw	ra,4(sp)
 80002f8:	dc000017 	ldw	r16,0(sp)
 80002fc:	dec00204 	addi	sp,sp,8
 8000300:	f800283a 	ret

08000304 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8000304:	f800283a 	ret

08000308 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8000308:	f800283a 	ret

0800030c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 800030c:	000170fa 	wrctl	ienable,zero
 8000310:	f800283a 	ret

08000314 <strlen>:
 8000314:	2005883a 	mov	r2,r4
 8000318:	10c00007 	ldb	r3,0(r2)
 800031c:	18000226 	beq	r3,zero,8000328 <strlen+0x14>
 8000320:	10800044 	addi	r2,r2,1
 8000324:	003ffc06 	br	8000318 <strlen+0x4>
 8000328:	1105c83a 	sub	r2,r2,r4
 800032c:	f800283a 	ret

08000330 <__divsi3>:
 8000330:	20001b16 	blt	r4,zero,80003a0 <__divsi3+0x70>
 8000334:	000f883a 	mov	r7,zero
 8000338:	28001616 	blt	r5,zero,8000394 <__divsi3+0x64>
 800033c:	200d883a 	mov	r6,r4
 8000340:	29001a2e 	bgeu	r5,r4,80003ac <__divsi3+0x7c>
 8000344:	00800804 	movi	r2,32
 8000348:	00c00044 	movi	r3,1
 800034c:	00000106 	br	8000354 <__divsi3+0x24>
 8000350:	10000d26 	beq	r2,zero,8000388 <__divsi3+0x58>
 8000354:	294b883a 	add	r5,r5,r5
 8000358:	10bfffc4 	addi	r2,r2,-1
 800035c:	18c7883a 	add	r3,r3,r3
 8000360:	293ffb36 	bltu	r5,r4,8000350 <__divsi3+0x20>
 8000364:	0005883a 	mov	r2,zero
 8000368:	18000726 	beq	r3,zero,8000388 <__divsi3+0x58>
 800036c:	0005883a 	mov	r2,zero
 8000370:	31400236 	bltu	r6,r5,800037c <__divsi3+0x4c>
 8000374:	314dc83a 	sub	r6,r6,r5
 8000378:	10c4b03a 	or	r2,r2,r3
 800037c:	1806d07a 	srli	r3,r3,1
 8000380:	280ad07a 	srli	r5,r5,1
 8000384:	183ffa1e 	bne	r3,zero,8000370 <__divsi3+0x40>
 8000388:	38000126 	beq	r7,zero,8000390 <__divsi3+0x60>
 800038c:	0085c83a 	sub	r2,zero,r2
 8000390:	f800283a 	ret
 8000394:	014bc83a 	sub	r5,zero,r5
 8000398:	39c0005c 	xori	r7,r7,1
 800039c:	003fe706 	br	800033c <__divsi3+0xc>
 80003a0:	0109c83a 	sub	r4,zero,r4
 80003a4:	01c00044 	movi	r7,1
 80003a8:	003fe306 	br	8000338 <__divsi3+0x8>
 80003ac:	00c00044 	movi	r3,1
 80003b0:	003fee06 	br	800036c <__divsi3+0x3c>

080003b4 <__modsi3>:
 80003b4:	20001716 	blt	r4,zero,8000414 <__modsi3+0x60>
 80003b8:	000f883a 	mov	r7,zero
 80003bc:	2005883a 	mov	r2,r4
 80003c0:	28001216 	blt	r5,zero,800040c <__modsi3+0x58>
 80003c4:	2900162e 	bgeu	r5,r4,8000420 <__modsi3+0x6c>
 80003c8:	01800804 	movi	r6,32
 80003cc:	00c00044 	movi	r3,1
 80003d0:	00000106 	br	80003d8 <__modsi3+0x24>
 80003d4:	30000a26 	beq	r6,zero,8000400 <__modsi3+0x4c>
 80003d8:	294b883a 	add	r5,r5,r5
 80003dc:	31bfffc4 	addi	r6,r6,-1
 80003e0:	18c7883a 	add	r3,r3,r3
 80003e4:	293ffb36 	bltu	r5,r4,80003d4 <__modsi3+0x20>
 80003e8:	18000526 	beq	r3,zero,8000400 <__modsi3+0x4c>
 80003ec:	1806d07a 	srli	r3,r3,1
 80003f0:	11400136 	bltu	r2,r5,80003f8 <__modsi3+0x44>
 80003f4:	1145c83a 	sub	r2,r2,r5
 80003f8:	280ad07a 	srli	r5,r5,1
 80003fc:	183ffb1e 	bne	r3,zero,80003ec <__modsi3+0x38>
 8000400:	38000126 	beq	r7,zero,8000408 <__modsi3+0x54>
 8000404:	0085c83a 	sub	r2,zero,r2
 8000408:	f800283a 	ret
 800040c:	014bc83a 	sub	r5,zero,r5
 8000410:	003fec06 	br	80003c4 <__modsi3+0x10>
 8000414:	0109c83a 	sub	r4,zero,r4
 8000418:	01c00044 	movi	r7,1
 800041c:	003fe706 	br	80003bc <__modsi3+0x8>
 8000420:	00c00044 	movi	r3,1
 8000424:	003ff106 	br	80003ec <__modsi3+0x38>

08000428 <__udivsi3>:
 8000428:	200d883a 	mov	r6,r4
 800042c:	2900152e 	bgeu	r5,r4,8000484 <__udivsi3+0x5c>
 8000430:	28001416 	blt	r5,zero,8000484 <__udivsi3+0x5c>
 8000434:	00800804 	movi	r2,32
 8000438:	00c00044 	movi	r3,1
 800043c:	00000206 	br	8000448 <__udivsi3+0x20>
 8000440:	10000e26 	beq	r2,zero,800047c <__udivsi3+0x54>
 8000444:	28000516 	blt	r5,zero,800045c <__udivsi3+0x34>
 8000448:	294b883a 	add	r5,r5,r5
 800044c:	10bfffc4 	addi	r2,r2,-1
 8000450:	18c7883a 	add	r3,r3,r3
 8000454:	293ffa36 	bltu	r5,r4,8000440 <__udivsi3+0x18>
 8000458:	18000826 	beq	r3,zero,800047c <__udivsi3+0x54>
 800045c:	0005883a 	mov	r2,zero
 8000460:	31400236 	bltu	r6,r5,800046c <__udivsi3+0x44>
 8000464:	314dc83a 	sub	r6,r6,r5
 8000468:	10c4b03a 	or	r2,r2,r3
 800046c:	1806d07a 	srli	r3,r3,1
 8000470:	280ad07a 	srli	r5,r5,1
 8000474:	183ffa1e 	bne	r3,zero,8000460 <__udivsi3+0x38>
 8000478:	f800283a 	ret
 800047c:	0005883a 	mov	r2,zero
 8000480:	f800283a 	ret
 8000484:	00c00044 	movi	r3,1
 8000488:	003ff406 	br	800045c <__udivsi3+0x34>

0800048c <__umodsi3>:
 800048c:	2005883a 	mov	r2,r4
 8000490:	2900122e 	bgeu	r5,r4,80004dc <__umodsi3+0x50>
 8000494:	28001116 	blt	r5,zero,80004dc <__umodsi3+0x50>
 8000498:	01800804 	movi	r6,32
 800049c:	00c00044 	movi	r3,1
 80004a0:	00000206 	br	80004ac <__umodsi3+0x20>
 80004a4:	30000c26 	beq	r6,zero,80004d8 <__umodsi3+0x4c>
 80004a8:	28000516 	blt	r5,zero,80004c0 <__umodsi3+0x34>
 80004ac:	294b883a 	add	r5,r5,r5
 80004b0:	31bfffc4 	addi	r6,r6,-1
 80004b4:	18c7883a 	add	r3,r3,r3
 80004b8:	293ffa36 	bltu	r5,r4,80004a4 <__umodsi3+0x18>
 80004bc:	18000626 	beq	r3,zero,80004d8 <__umodsi3+0x4c>
 80004c0:	1806d07a 	srli	r3,r3,1
 80004c4:	11400136 	bltu	r2,r5,80004cc <__umodsi3+0x40>
 80004c8:	1145c83a 	sub	r2,r2,r5
 80004cc:	280ad07a 	srli	r5,r5,1
 80004d0:	183ffb1e 	bne	r3,zero,80004c0 <__umodsi3+0x34>
 80004d4:	f800283a 	ret
 80004d8:	f800283a 	ret
 80004dc:	00c00044 	movi	r3,1
 80004e0:	003ff706 	br	80004c0 <__umodsi3+0x34>

080004e4 <__mulsi3>:
 80004e4:	0005883a 	mov	r2,zero
 80004e8:	20000726 	beq	r4,zero,8000508 <__mulsi3+0x24>
 80004ec:	20c0004c 	andi	r3,r4,1
 80004f0:	2008d07a 	srli	r4,r4,1
 80004f4:	18000126 	beq	r3,zero,80004fc <__mulsi3+0x18>
 80004f8:	1145883a 	add	r2,r2,r5
 80004fc:	294b883a 	add	r5,r5,r5
 8000500:	203ffa1e 	bne	r4,zero,80004ec <__mulsi3+0x8>
 8000504:	f800283a 	ret
 8000508:	f800283a 	ret
