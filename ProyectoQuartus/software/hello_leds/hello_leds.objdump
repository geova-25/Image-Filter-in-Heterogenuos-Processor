
hello_leds.elf:     file format elf32-littlenios2
hello_leds.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000003d8 memsz 0x000003d8 flags r-x
    LOAD off    0x000013f8 vaddr 0x000003f8 paddr 0x000004e4 align 2**12
         filesz 0x000000ec memsz 0x000000ec flags rw-
    LOAD off    0x000015d0 vaddr 0x000005d0 paddr 0x000005d0 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  000014e4  2**0
                  CONTENTS
  2 .text         000003d8  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  000003f8  000005d0  000014e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       000000ec  000003f8  000004e4  000013f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000005d0  000005d0  000015d0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  000005e0  000005e0  000014e4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000200  00000000  00000000  00001508  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00002918  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000dfa  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000fa8  00000000  00000000  00004e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000260  00000000  00000000  00005dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000a9d  00000000  00000000  00006024  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000003a1  00000000  00000000  00006ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00006e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000118  00000000  00000000  00006e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00007e1a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  00007e1d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00007e21  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00007e22  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00007e23  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00007e27  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00007e2b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000d  00000000  00000000  00007e2f  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000059  00000000  00000000  00007e3c  2**0
                  CONTENTS, READONLY
 26 .jdi          00003af6  00000000  00000000  00007e95  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00268b18  00000000  00000000  0000b98b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
000003f8 l    d  .rodata	00000000 .rodata
000003f8 l    d  .rwdata	00000000 .rwdata
000005d0 l    d  .bss	00000000 .bss
000005e0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_leds_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 impure.c
000003f8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
000000a0 g     F .text	0000001c putchar
00000358 g     F .text	0000002c alt_main
000004e4 g       *ABS*	00000000 __flash_rwdata_start
000003f0 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000005d0 g     O .bss	00000004 errno
000005d8 g     O .bss	00000004 alt_argv
000084d8 g       *ABS*	00000000 _gp
00000098 g     F .text	00000008 _putchar_r
000004d8 g     O .rwdata	00000004 _global_impure_ptr
000005e0 g       *ABS*	00000000 __bss_end
000003e8 g     F .text	00000004 alt_dcache_flush_all
000004e4 g       *ABS*	00000000 __ram_rwdata_end
00000384 g     F .text	00000040 write
00000110 g     F .text	00000058 _putc_r
000003f8 g       *ABS*	00000000 __ram_rodata_end
000005e0 g       *ABS*	00000000 end
01000000 g       *ABS*	00000000 __alt_stack_pointer
00000020 g     F .text	0000003c _start
000003e4 g     F .text	00000004 alt_sys_init
000003f8 g       *ABS*	00000000 __ram_rwdata_start
000003f8 g       *ABS*	00000000 __ram_rodata_start
000005e0 g       *ABS*	00000000 __alt_stack_base
00000168 g     F .text	000000b8 __sfvwrite_small_dev
000005d0 g       *ABS*	00000000 __bss_start
0000005c g     F .text	0000003c main
000005d4 g     O .bss	00000004 alt_envp
000004e0 g     O .rwdata	00000004 alt_errno
000000bc g     F .text	00000054 putc
000003f8 g       *ABS*	00000000 __flash_rodata_start
000003c4 g     F .text	00000020 alt_irq_init
00000220 g     F .text	00000058 _write_r
000004dc g     O .rwdata	00000004 _impure_ptr
000005dc g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
000004e4 g       *ABS*	00000000 _edata
000005e0 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
01000000 g       *ABS*	00000000 __alt_data_end
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000000c g       .entry	00000000 _exit
000003ec g     F .text	00000004 alt_icache_flush_all
00000278 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a13614 	ori	gp,gp,34008
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10817414 	ori	r2,r2,1488

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c17814 	ori	r3,r3,1504

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00002780 	call	278 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00003580 	call	358 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <alt_after_alt_main>

0000005c <main>:

#include "sys/alt_stdio.h"
#include "unistd.h"

int main()
{ 
  5c:	defffd04 	addi	sp,sp,-12
  60:	dc400115 	stw	r17,4(sp)
  64:	dc000015 	stw	r16,0(sp)
  68:	dfc00215 	stw	ra,8(sp)
	int *led_base= (int*)0x1001000;
	int *sdram_base = (int*)0x0;
	*sdram_base = 4;
  6c:	00c00104 	movi	r3,4
  70:	0005883a 	mov	r2,zero
	//alt_putstr("Hello from Nios II!\n");

	  /* Event loop never exits. */
	 while (1){
	  *led_base = *sdram_base;
  74:	04004034 	movhi	r16,256

int main()
{ 
	int *led_base= (int*)0x1001000;
	int *sdram_base = (int*)0x0;
	*sdram_base = 4;
  78:	10c00015 	stw	r3,0(r2)
	//alt_putstr("Hello from Nios II!\n");

	  /* Event loop never exits. */
	 while (1){
	  *led_base = *sdram_base;
  7c:	0023883a 	mov	r17,zero
  80:	84040004 	addi	r16,r16,4096
  84:	88800017 	ldw	r2,0(r17)
	  printf("d");
  88:	01001904 	movi	r4,100
	*sdram_base = 4;
	//alt_putstr("Hello from Nios II!\n");

	  /* Event loop never exits. */
	 while (1){
	  *led_base = *sdram_base;
  8c:	80800015 	stw	r2,0(r16)
	  printf("d");
  90:	00000a00 	call	a0 <putchar>
  94:	003ffb06 	br	84 <main+0x28>

00000098 <_putchar_r>:
  98:	21800217 	ldw	r6,8(r4)
  9c:	00001101 	jmpi	110 <_putc_r>

000000a0 <putchar>:
  a0:	00800034 	movhi	r2,0
  a4:	10813704 	addi	r2,r2,1244
  a8:	10800017 	ldw	r2,0(r2)
  ac:	200b883a 	mov	r5,r4
  b0:	11800217 	ldw	r6,8(r2)
  b4:	1009883a 	mov	r4,r2
  b8:	00001101 	jmpi	110 <_putc_r>

000000bc <putc>:
  bc:	defffd04 	addi	sp,sp,-12
  c0:	00800034 	movhi	r2,0
  c4:	dc000115 	stw	r16,4(sp)
  c8:	dfc00215 	stw	ra,8(sp)
  cc:	10805a04 	addi	r2,r2,360
  d0:	28800115 	stw	r2,4(r5)
  d4:	00800034 	movhi	r2,0
  d8:	10813704 	addi	r2,r2,1244
  dc:	d9000005 	stb	r4,0(sp)
  e0:	2021883a 	mov	r16,r4
  e4:	11000017 	ldw	r4,0(r2)
  e8:	01c00044 	movi	r7,1
  ec:	d80d883a 	mov	r6,sp
  f0:	00001680 	call	168 <__sfvwrite_small_dev>
  f4:	00ffffc4 	movi	r3,-1
  f8:	10c00126 	beq	r2,r3,100 <putc+0x44>
  fc:	8005883a 	mov	r2,r16
 100:	dfc00217 	ldw	ra,8(sp)
 104:	dc000117 	ldw	r16,4(sp)
 108:	dec00304 	addi	sp,sp,12
 10c:	f800283a 	ret

00000110 <_putc_r>:
 110:	defffd04 	addi	sp,sp,-12
 114:	00800034 	movhi	r2,0
 118:	dc000115 	stw	r16,4(sp)
 11c:	dfc00215 	stw	ra,8(sp)
 120:	10805a04 	addi	r2,r2,360
 124:	30800115 	stw	r2,4(r6)
 128:	00800034 	movhi	r2,0
 12c:	10813704 	addi	r2,r2,1244
 130:	11000017 	ldw	r4,0(r2)
 134:	2821883a 	mov	r16,r5
 138:	01c00044 	movi	r7,1
 13c:	300b883a 	mov	r5,r6
 140:	d80d883a 	mov	r6,sp
 144:	dc000005 	stb	r16,0(sp)
 148:	00001680 	call	168 <__sfvwrite_small_dev>
 14c:	00ffffc4 	movi	r3,-1
 150:	10c00126 	beq	r2,r3,158 <_putc_r+0x48>
 154:	8005883a 	mov	r2,r16
 158:	dfc00217 	ldw	ra,8(sp)
 15c:	dc000117 	ldw	r16,4(sp)
 160:	dec00304 	addi	sp,sp,12
 164:	f800283a 	ret

00000168 <__sfvwrite_small_dev>:
 168:	2880000b 	ldhu	r2,0(r5)
 16c:	1080020c 	andi	r2,r2,8
 170:	10002126 	beq	r2,zero,1f8 <__sfvwrite_small_dev+0x90>
 174:	2880008f 	ldh	r2,2(r5)
 178:	defffa04 	addi	sp,sp,-24
 17c:	dc000015 	stw	r16,0(sp)
 180:	dfc00515 	stw	ra,20(sp)
 184:	dd000415 	stw	r20,16(sp)
 188:	dcc00315 	stw	r19,12(sp)
 18c:	dc800215 	stw	r18,8(sp)
 190:	dc400115 	stw	r17,4(sp)
 194:	2821883a 	mov	r16,r5
 198:	10001216 	blt	r2,zero,1e4 <__sfvwrite_small_dev+0x7c>
 19c:	2027883a 	mov	r19,r4
 1a0:	3025883a 	mov	r18,r6
 1a4:	3823883a 	mov	r17,r7
 1a8:	05010004 	movi	r20,1024
 1ac:	04400b0e 	bge	zero,r17,1dc <__sfvwrite_small_dev+0x74>
 1b0:	880f883a 	mov	r7,r17
 1b4:	a440010e 	bge	r20,r17,1bc <__sfvwrite_small_dev+0x54>
 1b8:	01c10004 	movi	r7,1024
 1bc:	8140008f 	ldh	r5,2(r16)
 1c0:	900d883a 	mov	r6,r18
 1c4:	9809883a 	mov	r4,r19
 1c8:	00002200 	call	220 <_write_r>
 1cc:	0080050e 	bge	zero,r2,1e4 <__sfvwrite_small_dev+0x7c>
 1d0:	88a3c83a 	sub	r17,r17,r2
 1d4:	90a5883a 	add	r18,r18,r2
 1d8:	003ff406 	br	1ac <__sfvwrite_small_dev+0x44>
 1dc:	0005883a 	mov	r2,zero
 1e0:	00000706 	br	200 <__sfvwrite_small_dev+0x98>
 1e4:	8080000b 	ldhu	r2,0(r16)
 1e8:	10801014 	ori	r2,r2,64
 1ec:	8080000d 	sth	r2,0(r16)
 1f0:	00bfffc4 	movi	r2,-1
 1f4:	00000206 	br	200 <__sfvwrite_small_dev+0x98>
 1f8:	00bfffc4 	movi	r2,-1
 1fc:	f800283a 	ret
 200:	dfc00517 	ldw	ra,20(sp)
 204:	dd000417 	ldw	r20,16(sp)
 208:	dcc00317 	ldw	r19,12(sp)
 20c:	dc800217 	ldw	r18,8(sp)
 210:	dc400117 	ldw	r17,4(sp)
 214:	dc000017 	ldw	r16,0(sp)
 218:	dec00604 	addi	sp,sp,24
 21c:	f800283a 	ret

00000220 <_write_r>:
 220:	defffd04 	addi	sp,sp,-12
 224:	dc000015 	stw	r16,0(sp)
 228:	04000034 	movhi	r16,0
 22c:	dc400115 	stw	r17,4(sp)
 230:	84017404 	addi	r16,r16,1488
 234:	2023883a 	mov	r17,r4
 238:	2809883a 	mov	r4,r5
 23c:	300b883a 	mov	r5,r6
 240:	380d883a 	mov	r6,r7
 244:	dfc00215 	stw	ra,8(sp)
 248:	80000015 	stw	zero,0(r16)
 24c:	00003840 	call	384 <write>
 250:	00ffffc4 	movi	r3,-1
 254:	10c0031e 	bne	r2,r3,264 <_write_r+0x44>
 258:	80c00017 	ldw	r3,0(r16)
 25c:	18000126 	beq	r3,zero,264 <_write_r+0x44>
 260:	88c00015 	stw	r3,0(r17)
 264:	dfc00217 	ldw	ra,8(sp)
 268:	dc400117 	ldw	r17,4(sp)
 26c:	dc000017 	ldw	r16,0(sp)
 270:	dec00304 	addi	sp,sp,12
 274:	f800283a 	ret

00000278 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 278:	deffff04 	addi	sp,sp,-4
 27c:	01000034 	movhi	r4,0
 280:	01400034 	movhi	r5,0
 284:	dfc00015 	stw	ra,0(sp)
 288:	2100fe04 	addi	r4,r4,1016
 28c:	29413904 	addi	r5,r5,1252

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 290:	2140061e 	bne	r4,r5,2ac <alt_load+0x34>
 294:	01000034 	movhi	r4,0
 298:	01400034 	movhi	r5,0
 29c:	21000804 	addi	r4,r4,32
 2a0:	29400804 	addi	r5,r5,32
 2a4:	2140121e 	bne	r4,r5,2f0 <alt_load+0x78>
 2a8:	00000b06 	br	2d8 <alt_load+0x60>
 2ac:	00c00034 	movhi	r3,0
 2b0:	18c13904 	addi	r3,r3,1252
 2b4:	1907c83a 	sub	r3,r3,r4
 2b8:	0005883a 	mov	r2,zero
  {
    while( to != end )
 2bc:	10fff526 	beq	r2,r3,294 <alt_load+0x1c>
    {
      *to++ = *from++;
 2c0:	114f883a 	add	r7,r2,r5
 2c4:	39c00017 	ldw	r7,0(r7)
 2c8:	110d883a 	add	r6,r2,r4
 2cc:	10800104 	addi	r2,r2,4
 2d0:	31c00015 	stw	r7,0(r6)
 2d4:	003ff906 	br	2bc <alt_load+0x44>
 2d8:	01000034 	movhi	r4,0
 2dc:	01400034 	movhi	r5,0
 2e0:	2100fe04 	addi	r4,r4,1016
 2e4:	2940fe04 	addi	r5,r5,1016

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 2e8:	2140101e 	bne	r4,r5,32c <alt_load+0xb4>
 2ec:	00000b06 	br	31c <alt_load+0xa4>
 2f0:	00c00034 	movhi	r3,0
 2f4:	18c00804 	addi	r3,r3,32
 2f8:	1907c83a 	sub	r3,r3,r4
 2fc:	0005883a 	mov	r2,zero
  {
    while( to != end )
 300:	10fff526 	beq	r2,r3,2d8 <alt_load+0x60>
    {
      *to++ = *from++;
 304:	114f883a 	add	r7,r2,r5
 308:	39c00017 	ldw	r7,0(r7)
 30c:	110d883a 	add	r6,r2,r4
 310:	10800104 	addi	r2,r2,4
 314:	31c00015 	stw	r7,0(r6)
 318:	003ff906 	br	300 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 31c:	00003e80 	call	3e8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 320:	dfc00017 	ldw	ra,0(sp)
 324:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 328:	00003ec1 	jmpi	3ec <alt_icache_flush_all>
 32c:	00c00034 	movhi	r3,0
 330:	18c0fe04 	addi	r3,r3,1016
 334:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 338:	0005883a 	mov	r2,zero
  {
    while( to != end )
 33c:	18bff726 	beq	r3,r2,31c <alt_load+0xa4>
    {
      *to++ = *from++;
 340:	114f883a 	add	r7,r2,r5
 344:	39c00017 	ldw	r7,0(r7)
 348:	110d883a 	add	r6,r2,r4
 34c:	10800104 	addi	r2,r2,4
 350:	31c00015 	stw	r7,0(r6)
 354:	003ff906 	br	33c <alt_load+0xc4>

00000358 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 358:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 35c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 360:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 364:	00003c40 	call	3c4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 368:	00003e40 	call	3e4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 36c:	d1a03f17 	ldw	r6,-32516(gp)
 370:	d1604017 	ldw	r5,-32512(gp)
 374:	d1204117 	ldw	r4,-32508(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 378:	dfc00017 	ldw	ra,0(sp)
 37c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 380:	000005c1 	jmpi	5c <main>

00000384 <write>:

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 384:	d0a00217 	ldw	r2,-32760(gp)
 388:	10000926 	beq	r2,zero,3b0 <write+0x2c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 38c:	deffff04 	addi	sp,sp,-4
 390:	dfc00015 	stw	ra,0(sp)
 394:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 398:	00c01444 	movi	r3,81
 39c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 3a0:	00bfffc4 	movi	r2,-1
 3a4:	dfc00017 	ldw	ra,0(sp)
 3a8:	dec00104 	addi	sp,sp,4
 3ac:	f800283a 	ret
 3b0:	d0a03e04 	addi	r2,gp,-32520
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 3b4:	00c01444 	movi	r3,81
 3b8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 3bc:	00bfffc4 	movi	r2,-1
 3c0:	f800283a 	ret

000003c4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 3c4:	deffff04 	addi	sp,sp,-4
 3c8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS, nios);
 3cc:	00003f00 	call	3f0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 3d0:	00800044 	movi	r2,1
 3d4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 3d8:	dfc00017 	ldw	ra,0(sp)
 3dc:	dec00104 	addi	sp,sp,4
 3e0:	f800283a 	ret

000003e4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 3e4:	f800283a 	ret

000003e8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 3e8:	f800283a 	ret

000003ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 3ec:	f800283a 	ret

000003f0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 3f0:	000170fa 	wrctl	ienable,zero
 3f4:	f800283a 	ret
