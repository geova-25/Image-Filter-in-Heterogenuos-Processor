
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000c80 memsz 0x00000c80 flags r-x
    LOAD off    0x00002000 vaddr 0x04000000 paddr 0x00000ca0 align 2**12
         filesz 0x000000f8 memsz 0x00000108 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  000020f8  2**0
                  CONTENTS
  2 .text         00000c80  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000008  04000000  00000ca0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  04000008  00000ca8  00002008  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  040000f8  00000d98  000020f8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip       00000000  00000d98  00000d98  000020f8  2**0
                  CONTENTS
  7 .sdram        00000000  04000108  04000108  000020f8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000020f8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000002c8  00000000  00000000  00002120  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000036c4  00000000  00000000  000023e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001368  00000000  00000000  00005aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000016b9  00000000  00000000  00006e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000003b8  00000000  00000000  000084d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001013  00000000  00000000  00008888  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001351  00000000  00000000  0000989b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0000abec  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000220  00000000  00000000  0000ac30  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000bf36  2**0
                  CONTENTS, READONLY
 19 .cpu          00000004  00000000  00000000  0000bf39  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0000bf3d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0000bf3e  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0000bf3f  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0000bf4a  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0000bf55  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000009  00000000  00000000  0000bf60  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000059  00000000  00000000  0000bf69  2**0
                  CONTENTS, READONLY
 27 .jdi          0000381f  00000000  00000000  0000bfc2  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00279b4c  00000000  00000000  0000f7e1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
04000000 l    d  .rodata	00000000 .rodata
04000008 l    d  .rwdata	00000000 .rwdata
040000f8 l    d  .bss	00000000 .bss
00000d98 l    d  .onchip	00000000 .onchip
04000108 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000184 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
04000008 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000b20 g     F .text	0000002c alt_main
00000ca8 g       *ABS*	00000000 __flash_rwdata_start
00000138 g     F .text	0000004c printf
00000c98 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
040000f8 g     O .bss	00000004 errno
04000100 g     O .bss	00000004 alt_argv
040080e8 g       *ABS*	00000000 _gp
00000b4c g     F .text	00000004 usleep
000000fc g     F .text	0000003c _printf_r
0000095c g     F .text	00000064 .hidden __udivsi3
040000e8 g     O .rwdata	00000004 _global_impure_ptr
04000108 g       *ABS*	00000000 __bss_end
00000c90 g     F .text	00000004 alt_dcache_flush_all
040000f8 g       *ABS*	00000000 __ram_rwdata_end
00000b50 g     F .text	00000060 write
04000008 g       *ABS*	00000000 __ram_rodata_end
040000f0 g     O .rwdata	00000004 jtag_uart_0
000009c0 g     F .text	00000058 .hidden __umodsi3
04000108 g       *ABS*	00000000 end
08000000 g       *ABS*	00000000 __alt_stack_pointer
00000bd4 g     F .text	00000034 altera_avalon_jtag_uart_write
000001f0 g     F .text	0000052c ___vfprintf_internal_r
00000020 g     F .text	0000003c _start
00000bd0 g     F .text	00000004 alt_sys_init
00000a18 g     F .text	00000028 .hidden __mulsi3
04000008 g       *ABS*	00000000 __ram_rwdata_start
04000000 g       *ABS*	00000000 __ram_rodata_start
00000c08 g     F .text	00000088 alt_busy_sleep
04000108 g       *ABS*	00000000 __alt_stack_base
00000738 g     F .text	000000b8 __sfvwrite_small_dev
040000f8 g       *ABS*	00000000 __bss_start
0000005c g     F .text	000000a0 main
040000fc g     O .bss	00000004 alt_envp
040000f4 g     O .rwdata	00000004 alt_errno
00000864 g     F .text	00000084 .hidden __divsi3
00000ca0 g       *ABS*	00000000 __flash_rodata_start
00000bb0 g     F .text	00000020 alt_irq_init
0000080c g     F .text	00000058 _write_r
040000ec g     O .rwdata	00000004 _impure_ptr
04000104 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
040000f8 g       *ABS*	00000000 _edata
04000108 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000000 g       *ABS*	00000000 __alt_mem_onchip
000008e8 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000000 g       *ABS*	00000000 __alt_mem_sdram
0000000c g       .entry	00000000 _exit
000007f0 g     F .text	0000001c strlen
00000c94 g     F .text	00000004 alt_icache_flush_all
0000071c g     F .text	0000001c __vfprintf_internal
00000a40 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  28:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
  2c:	d6a03a14 	ori	gp,gp,33000
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
  34:	10803e14 	ori	r2,r2,248

    movhi r3, %hi(__bss_end)
  38:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
  3c:	18c04214 	ori	r3,r3,264

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	0000a400 	call	a40 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	0000b200 	call	b20 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <alt_after_alt_main>

0000005c <main>:
#include "sys/alt_stdio.h"
#include "system.h"
#include "unistd.h"
int main()
{ 
  5c:	defffe04 	addi	sp,sp,-8
  /* Event loop never exits. */
 // while (1){
	//  alt_putstr("Hello from Nios II!\n");
	//  *sdram_base =*sdram_base + 1;
	 // *led_base = * sdram_base;
	  usleep(1000);
  60:	0100fa04 	movi	r4,1000
#include "sys/alt_stdio.h"
#include "system.h"
#include "unistd.h"
int main()
{ 
  64:	dfc00115 	stw	ra,4(sp)
  68:	dc000015 	stw	r16,0(sp)
  /* Event loop never exits. */
 // while (1){
	//  alt_putstr("Hello from Nios II!\n");
	//  *sdram_base =*sdram_base + 1;
	 // *led_base = * sdram_base;
	  usleep(1000);
  6c:	0000b4c0 	call	b4c <usleep>
	  printf("-%c\n",*(char*)(sdram_base));
  70:	00810034 	movhi	r2,1024
  74:	10880004 	addi	r2,r2,8192
  78:	11400007 	ldb	r5,0(r2)
  7c:	04010034 	movhi	r16,1024
  80:	84000004 	addi	r16,r16,0
  84:	8009883a 	mov	r4,r16
  88:	00001380 	call	138 <printf>
	  printf("-%c\n",*(char*)(sdram_base+1));
  8c:	00810034 	movhi	r2,1024
  90:	10880044 	addi	r2,r2,8193
  94:	11400007 	ldb	r5,0(r2)
  98:	8009883a 	mov	r4,r16
  9c:	00001380 	call	138 <printf>
	  printf("-%c\n",*(char*)(sdram_base+2));
  a0:	00810034 	movhi	r2,1024
  a4:	10880084 	addi	r2,r2,8194
  a8:	11400007 	ldb	r5,0(r2)
  ac:	8009883a 	mov	r4,r16
  b0:	00001380 	call	138 <printf>
	  printf("-%c\n",*(char*)(sdram_base+3));
  b4:	00810034 	movhi	r2,1024
  b8:	108800c4 	addi	r2,r2,8195
  bc:	11400007 	ldb	r5,0(r2)
  c0:	8009883a 	mov	r4,r16
  c4:	00001380 	call	138 <printf>
	  printf("-%c\n",*(char*)(sdram_base+4));
  c8:	00810034 	movhi	r2,1024
  cc:	10880104 	addi	r2,r2,8196
  d0:	11400007 	ldb	r5,0(r2)
  d4:	8009883a 	mov	r4,r16
  d8:	00001380 	call	138 <printf>
	  *led_base = 9;
  dc:	00c00244 	movi	r3,9
  e0:	00840004 	movi	r2,4096
  e4:	10c00015 	stw	r3,0(r2)
  //}

  return 0;
}
  e8:	0005883a 	mov	r2,zero
  ec:	dfc00117 	ldw	ra,4(sp)
  f0:	dc000017 	ldw	r16,0(sp)
  f4:	dec00204 	addi	sp,sp,8
  f8:	f800283a 	ret

000000fc <_printf_r>:
  fc:	defffd04 	addi	sp,sp,-12
 100:	dfc00015 	stw	ra,0(sp)
 104:	d9800115 	stw	r6,4(sp)
 108:	d9c00215 	stw	r7,8(sp)
 10c:	20c00217 	ldw	r3,8(r4)
 110:	01800034 	movhi	r6,0
 114:	3181ce04 	addi	r6,r6,1848
 118:	19800115 	stw	r6,4(r3)
 11c:	280d883a 	mov	r6,r5
 120:	21400217 	ldw	r5,8(r4)
 124:	d9c00104 	addi	r7,sp,4
 128:	00001f00 	call	1f0 <___vfprintf_internal_r>
 12c:	dfc00017 	ldw	ra,0(sp)
 130:	dec00304 	addi	sp,sp,12
 134:	f800283a 	ret

00000138 <printf>:
 138:	defffc04 	addi	sp,sp,-16
 13c:	dfc00015 	stw	ra,0(sp)
 140:	d9400115 	stw	r5,4(sp)
 144:	d9800215 	stw	r6,8(sp)
 148:	d9c00315 	stw	r7,12(sp)
 14c:	00810034 	movhi	r2,1024
 150:	10803b04 	addi	r2,r2,236
 154:	10800017 	ldw	r2,0(r2)
 158:	01400034 	movhi	r5,0
 15c:	2941ce04 	addi	r5,r5,1848
 160:	10c00217 	ldw	r3,8(r2)
 164:	d9800104 	addi	r6,sp,4
 168:	19400115 	stw	r5,4(r3)
 16c:	200b883a 	mov	r5,r4
 170:	11000217 	ldw	r4,8(r2)
 174:	000071c0 	call	71c <__vfprintf_internal>
 178:	dfc00017 	ldw	ra,0(sp)
 17c:	dec00404 	addi	sp,sp,16
 180:	f800283a 	ret

00000184 <print_repeat>:
 184:	defffb04 	addi	sp,sp,-20
 188:	dc800315 	stw	r18,12(sp)
 18c:	dc400215 	stw	r17,8(sp)
 190:	dc000115 	stw	r16,4(sp)
 194:	dfc00415 	stw	ra,16(sp)
 198:	2025883a 	mov	r18,r4
 19c:	2823883a 	mov	r17,r5
 1a0:	d9800005 	stb	r6,0(sp)
 1a4:	3821883a 	mov	r16,r7
 1a8:	04000a0e 	bge	zero,r16,1d4 <print_repeat+0x50>
 1ac:	88800117 	ldw	r2,4(r17)
 1b0:	01c00044 	movi	r7,1
 1b4:	d80d883a 	mov	r6,sp
 1b8:	880b883a 	mov	r5,r17
 1bc:	9009883a 	mov	r4,r18
 1c0:	103ee83a 	callr	r2
 1c4:	843fffc4 	addi	r16,r16,-1
 1c8:	103ff726 	beq	r2,zero,1a8 <print_repeat+0x24>
 1cc:	00bfffc4 	movi	r2,-1
 1d0:	00000106 	br	1d8 <print_repeat+0x54>
 1d4:	0005883a 	mov	r2,zero
 1d8:	dfc00417 	ldw	ra,16(sp)
 1dc:	dc800317 	ldw	r18,12(sp)
 1e0:	dc400217 	ldw	r17,8(sp)
 1e4:	dc000117 	ldw	r16,4(sp)
 1e8:	dec00504 	addi	sp,sp,20
 1ec:	f800283a 	ret

000001f0 <___vfprintf_internal_r>:
 1f0:	deffe504 	addi	sp,sp,-108
 1f4:	d8c00804 	addi	r3,sp,32
 1f8:	ddc01815 	stw	r23,96(sp)
 1fc:	dd801715 	stw	r22,92(sp)
 200:	dd401615 	stw	r21,88(sp)
 204:	dd001515 	stw	r20,84(sp)
 208:	dcc01415 	stw	r19,80(sp)
 20c:	dc801315 	stw	r18,76(sp)
 210:	dc401215 	stw	r17,72(sp)
 214:	dc001115 	stw	r16,68(sp)
 218:	dfc01a15 	stw	ra,104(sp)
 21c:	df001915 	stw	fp,100(sp)
 220:	2029883a 	mov	r20,r4
 224:	2823883a 	mov	r17,r5
 228:	382d883a 	mov	r22,r7
 22c:	d9800f15 	stw	r6,60(sp)
 230:	0021883a 	mov	r16,zero
 234:	d8000e15 	stw	zero,56(sp)
 238:	d8000a15 	stw	zero,40(sp)
 23c:	002b883a 	mov	r21,zero
 240:	0027883a 	mov	r19,zero
 244:	0025883a 	mov	r18,zero
 248:	d8000c15 	stw	zero,48(sp)
 24c:	d8000b15 	stw	zero,44(sp)
 250:	002f883a 	mov	r23,zero
 254:	d8c00915 	stw	r3,36(sp)
 258:	d8c00f17 	ldw	r3,60(sp)
 25c:	19000003 	ldbu	r4,0(r3)
 260:	20803fcc 	andi	r2,r4,255
 264:	1080201c 	xori	r2,r2,128
 268:	10bfe004 	addi	r2,r2,-128
 26c:	10011e26 	beq	r2,zero,6e8 <___vfprintf_internal_r+0x4f8>
 270:	00c00044 	movi	r3,1
 274:	b8c01426 	beq	r23,r3,2c8 <___vfprintf_internal_r+0xd8>
 278:	1dc00216 	blt	r3,r23,284 <___vfprintf_internal_r+0x94>
 27c:	b8000626 	beq	r23,zero,298 <___vfprintf_internal_r+0xa8>
 280:	00011506 	br	6d8 <___vfprintf_internal_r+0x4e8>
 284:	01400084 	movi	r5,2
 288:	b9401d26 	beq	r23,r5,300 <___vfprintf_internal_r+0x110>
 28c:	014000c4 	movi	r5,3
 290:	b9402b26 	beq	r23,r5,340 <___vfprintf_internal_r+0x150>
 294:	00011006 	br	6d8 <___vfprintf_internal_r+0x4e8>
 298:	01400944 	movi	r5,37
 29c:	1140fc26 	beq	r2,r5,690 <___vfprintf_internal_r+0x4a0>
 2a0:	88800117 	ldw	r2,4(r17)
 2a4:	d9000005 	stb	r4,0(sp)
 2a8:	01c00044 	movi	r7,1
 2ac:	d80d883a 	mov	r6,sp
 2b0:	880b883a 	mov	r5,r17
 2b4:	a009883a 	mov	r4,r20
 2b8:	103ee83a 	callr	r2
 2bc:	1000d81e 	bne	r2,zero,620 <___vfprintf_internal_r+0x430>
 2c0:	84000044 	addi	r16,r16,1
 2c4:	00010406 	br	6d8 <___vfprintf_internal_r+0x4e8>
 2c8:	01400c04 	movi	r5,48
 2cc:	1140fa26 	beq	r2,r5,6b8 <___vfprintf_internal_r+0x4c8>
 2d0:	01400944 	movi	r5,37
 2d4:	11400a1e 	bne	r2,r5,300 <___vfprintf_internal_r+0x110>
 2d8:	d8800005 	stb	r2,0(sp)
 2dc:	88800117 	ldw	r2,4(r17)
 2e0:	b80f883a 	mov	r7,r23
 2e4:	d80d883a 	mov	r6,sp
 2e8:	880b883a 	mov	r5,r17
 2ec:	a009883a 	mov	r4,r20
 2f0:	103ee83a 	callr	r2
 2f4:	1000ca1e 	bne	r2,zero,620 <___vfprintf_internal_r+0x430>
 2f8:	84000044 	addi	r16,r16,1
 2fc:	0000f506 	br	6d4 <___vfprintf_internal_r+0x4e4>
 300:	25fff404 	addi	r23,r4,-48
 304:	bdc03fcc 	andi	r23,r23,255
 308:	00c00244 	movi	r3,9
 30c:	1dc00936 	bltu	r3,r23,334 <___vfprintf_internal_r+0x144>
 310:	00bfffc4 	movi	r2,-1
 314:	90800426 	beq	r18,r2,328 <___vfprintf_internal_r+0x138>
 318:	01400284 	movi	r5,10
 31c:	9009883a 	mov	r4,r18
 320:	0000a180 	call	a18 <__mulsi3>
 324:	00000106 	br	32c <___vfprintf_internal_r+0x13c>
 328:	0005883a 	mov	r2,zero
 32c:	b8a5883a 	add	r18,r23,r2
 330:	0000e206 	br	6bc <___vfprintf_internal_r+0x4cc>
 334:	01400b84 	movi	r5,46
 338:	1140e426 	beq	r2,r5,6cc <___vfprintf_internal_r+0x4dc>
 33c:	05c00084 	movi	r23,2
 340:	213ff404 	addi	r4,r4,-48
 344:	27003fcc 	andi	fp,r4,255
 348:	00c00244 	movi	r3,9
 34c:	1f000936 	bltu	r3,fp,374 <___vfprintf_internal_r+0x184>
 350:	00bfffc4 	movi	r2,-1
 354:	98800426 	beq	r19,r2,368 <___vfprintf_internal_r+0x178>
 358:	01400284 	movi	r5,10
 35c:	9809883a 	mov	r4,r19
 360:	0000a180 	call	a18 <__mulsi3>
 364:	00000106 	br	36c <___vfprintf_internal_r+0x17c>
 368:	0005883a 	mov	r2,zero
 36c:	e0a7883a 	add	r19,fp,r2
 370:	0000d906 	br	6d8 <___vfprintf_internal_r+0x4e8>
 374:	00c01b04 	movi	r3,108
 378:	10c0d226 	beq	r2,r3,6c4 <___vfprintf_internal_r+0x4d4>
 37c:	013fffc4 	movi	r4,-1
 380:	99000226 	beq	r19,r4,38c <___vfprintf_internal_r+0x19c>
 384:	d8000b15 	stw	zero,44(sp)
 388:	00000106 	br	390 <___vfprintf_internal_r+0x1a0>
 38c:	04c00044 	movi	r19,1
 390:	01001a44 	movi	r4,105
 394:	11001626 	beq	r2,r4,3f0 <___vfprintf_internal_r+0x200>
 398:	20800916 	blt	r4,r2,3c0 <___vfprintf_internal_r+0x1d0>
 39c:	010018c4 	movi	r4,99
 3a0:	11008826 	beq	r2,r4,5c4 <___vfprintf_internal_r+0x3d4>
 3a4:	01001904 	movi	r4,100
 3a8:	11001126 	beq	r2,r4,3f0 <___vfprintf_internal_r+0x200>
 3ac:	01001604 	movi	r4,88
 3b0:	1100c81e 	bne	r2,r4,6d4 <___vfprintf_internal_r+0x4e4>
 3b4:	00c00044 	movi	r3,1
 3b8:	d8c00e15 	stw	r3,56(sp)
 3bc:	00001506 	br	414 <___vfprintf_internal_r+0x224>
 3c0:	01001cc4 	movi	r4,115
 3c4:	11009826 	beq	r2,r4,628 <___vfprintf_internal_r+0x438>
 3c8:	20800416 	blt	r4,r2,3dc <___vfprintf_internal_r+0x1ec>
 3cc:	01001bc4 	movi	r4,111
 3d0:	1100c01e 	bne	r2,r4,6d4 <___vfprintf_internal_r+0x4e4>
 3d4:	05400204 	movi	r21,8
 3d8:	00000f06 	br	418 <___vfprintf_internal_r+0x228>
 3dc:	01001d44 	movi	r4,117
 3e0:	11000d26 	beq	r2,r4,418 <___vfprintf_internal_r+0x228>
 3e4:	01001e04 	movi	r4,120
 3e8:	11000a26 	beq	r2,r4,414 <___vfprintf_internal_r+0x224>
 3ec:	0000b906 	br	6d4 <___vfprintf_internal_r+0x4e4>
 3f0:	d8c00a17 	ldw	r3,40(sp)
 3f4:	b7000104 	addi	fp,r22,4
 3f8:	18000726 	beq	r3,zero,418 <___vfprintf_internal_r+0x228>
 3fc:	df000d15 	stw	fp,52(sp)
 400:	b5c00017 	ldw	r23,0(r22)
 404:	b800080e 	bge	r23,zero,428 <___vfprintf_internal_r+0x238>
 408:	05efc83a 	sub	r23,zero,r23
 40c:	02400044 	movi	r9,1
 410:	00000606 	br	42c <___vfprintf_internal_r+0x23c>
 414:	05400404 	movi	r21,16
 418:	b0c00104 	addi	r3,r22,4
 41c:	d8c00d15 	stw	r3,52(sp)
 420:	b5c00017 	ldw	r23,0(r22)
 424:	d8000a15 	stw	zero,40(sp)
 428:	0013883a 	mov	r9,zero
 42c:	d839883a 	mov	fp,sp
 430:	b8001726 	beq	r23,zero,490 <___vfprintf_internal_r+0x2a0>
 434:	a80b883a 	mov	r5,r21
 438:	b809883a 	mov	r4,r23
 43c:	da401015 	stw	r9,64(sp)
 440:	000095c0 	call	95c <__udivsi3>
 444:	a80b883a 	mov	r5,r21
 448:	1009883a 	mov	r4,r2
 44c:	102d883a 	mov	r22,r2
 450:	0000a180 	call	a18 <__mulsi3>
 454:	b885c83a 	sub	r2,r23,r2
 458:	00c00244 	movi	r3,9
 45c:	da401017 	ldw	r9,64(sp)
 460:	18800216 	blt	r3,r2,46c <___vfprintf_internal_r+0x27c>
 464:	10800c04 	addi	r2,r2,48
 468:	00000506 	br	480 <___vfprintf_internal_r+0x290>
 46c:	d8c00e17 	ldw	r3,56(sp)
 470:	18000226 	beq	r3,zero,47c <___vfprintf_internal_r+0x28c>
 474:	10800dc4 	addi	r2,r2,55
 478:	00000106 	br	480 <___vfprintf_internal_r+0x290>
 47c:	108015c4 	addi	r2,r2,87
 480:	e0800005 	stb	r2,0(fp)
 484:	b02f883a 	mov	r23,r22
 488:	e7000044 	addi	fp,fp,1
 48c:	003fe806 	br	430 <___vfprintf_internal_r+0x240>
 490:	e6efc83a 	sub	r23,fp,sp
 494:	9dc5c83a 	sub	r2,r19,r23
 498:	0080090e 	bge	zero,r2,4c0 <___vfprintf_internal_r+0x2d0>
 49c:	e085883a 	add	r2,fp,r2
 4a0:	01400c04 	movi	r5,48
 4a4:	d8c00917 	ldw	r3,36(sp)
 4a8:	e009883a 	mov	r4,fp
 4ac:	e0c0032e 	bgeu	fp,r3,4bc <___vfprintf_internal_r+0x2cc>
 4b0:	e7000044 	addi	fp,fp,1
 4b4:	21400005 	stb	r5,0(r4)
 4b8:	e0bffa1e 	bne	fp,r2,4a4 <___vfprintf_internal_r+0x2b4>
 4bc:	e6efc83a 	sub	r23,fp,sp
 4c0:	d8c00b17 	ldw	r3,44(sp)
 4c4:	4dd1883a 	add	r8,r9,r23
 4c8:	922dc83a 	sub	r22,r18,r8
 4cc:	18001626 	beq	r3,zero,528 <___vfprintf_internal_r+0x338>
 4d0:	48000a26 	beq	r9,zero,4fc <___vfprintf_internal_r+0x30c>
 4d4:	00800b44 	movi	r2,45
 4d8:	d8800805 	stb	r2,32(sp)
 4dc:	88800117 	ldw	r2,4(r17)
 4e0:	01c00044 	movi	r7,1
 4e4:	d9800804 	addi	r6,sp,32
 4e8:	880b883a 	mov	r5,r17
 4ec:	a009883a 	mov	r4,r20
 4f0:	103ee83a 	callr	r2
 4f4:	10004a1e 	bne	r2,zero,620 <___vfprintf_internal_r+0x430>
 4f8:	84000044 	addi	r16,r16,1
 4fc:	0580070e 	bge	zero,r22,51c <___vfprintf_internal_r+0x32c>
 500:	b00f883a 	mov	r7,r22
 504:	01800c04 	movi	r6,48
 508:	880b883a 	mov	r5,r17
 50c:	a009883a 	mov	r4,r20
 510:	00001840 	call	184 <print_repeat>
 514:	1000421e 	bne	r2,zero,620 <___vfprintf_internal_r+0x430>
 518:	85a1883a 	add	r16,r16,r22
 51c:	e02d883a 	mov	r22,fp
 520:	bf2fc83a 	sub	r23,r23,fp
 524:	00002006 	br	5a8 <___vfprintf_internal_r+0x3b8>
 528:	0580090e 	bge	zero,r22,550 <___vfprintf_internal_r+0x360>
 52c:	b00f883a 	mov	r7,r22
 530:	01800804 	movi	r6,32
 534:	880b883a 	mov	r5,r17
 538:	a009883a 	mov	r4,r20
 53c:	da401015 	stw	r9,64(sp)
 540:	00001840 	call	184 <print_repeat>
 544:	da401017 	ldw	r9,64(sp)
 548:	1000351e 	bne	r2,zero,620 <___vfprintf_internal_r+0x430>
 54c:	85a1883a 	add	r16,r16,r22
 550:	483ff226 	beq	r9,zero,51c <___vfprintf_internal_r+0x32c>
 554:	00800b44 	movi	r2,45
 558:	d8800805 	stb	r2,32(sp)
 55c:	88800117 	ldw	r2,4(r17)
 560:	01c00044 	movi	r7,1
 564:	d9800804 	addi	r6,sp,32
 568:	880b883a 	mov	r5,r17
 56c:	a009883a 	mov	r4,r20
 570:	103ee83a 	callr	r2
 574:	10002a1e 	bne	r2,zero,620 <___vfprintf_internal_r+0x430>
 578:	84000044 	addi	r16,r16,1
 57c:	003fe706 	br	51c <___vfprintf_internal_r+0x32c>
 580:	b5bfffc4 	addi	r22,r22,-1
 584:	b0800003 	ldbu	r2,0(r22)
 588:	01c00044 	movi	r7,1
 58c:	d9800804 	addi	r6,sp,32
 590:	d8800805 	stb	r2,32(sp)
 594:	88800117 	ldw	r2,4(r17)
 598:	880b883a 	mov	r5,r17
 59c:	a009883a 	mov	r4,r20
 5a0:	103ee83a 	callr	r2
 5a4:	10001e1e 	bne	r2,zero,620 <___vfprintf_internal_r+0x430>
 5a8:	8585c83a 	sub	r2,r16,r22
 5ac:	b5c9883a 	add	r4,r22,r23
 5b0:	e085883a 	add	r2,fp,r2
 5b4:	013ff216 	blt	zero,r4,580 <___vfprintf_internal_r+0x390>
 5b8:	1021883a 	mov	r16,r2
 5bc:	dd800d17 	ldw	r22,52(sp)
 5c0:	00004406 	br	6d4 <___vfprintf_internal_r+0x4e4>
 5c4:	00800044 	movi	r2,1
 5c8:	1480080e 	bge	r2,r18,5ec <___vfprintf_internal_r+0x3fc>
 5cc:	95ffffc4 	addi	r23,r18,-1
 5d0:	b80f883a 	mov	r7,r23
 5d4:	01800804 	movi	r6,32
 5d8:	880b883a 	mov	r5,r17
 5dc:	a009883a 	mov	r4,r20
 5e0:	00001840 	call	184 <print_repeat>
 5e4:	10000e1e 	bne	r2,zero,620 <___vfprintf_internal_r+0x430>
 5e8:	85e1883a 	add	r16,r16,r23
 5ec:	b0800017 	ldw	r2,0(r22)
 5f0:	01c00044 	movi	r7,1
 5f4:	d80d883a 	mov	r6,sp
 5f8:	d8800005 	stb	r2,0(sp)
 5fc:	88800117 	ldw	r2,4(r17)
 600:	880b883a 	mov	r5,r17
 604:	a009883a 	mov	r4,r20
 608:	b5c00104 	addi	r23,r22,4
 60c:	103ee83a 	callr	r2
 610:	1000031e 	bne	r2,zero,620 <___vfprintf_internal_r+0x430>
 614:	84000044 	addi	r16,r16,1
 618:	b82d883a 	mov	r22,r23
 61c:	00002d06 	br	6d4 <___vfprintf_internal_r+0x4e4>
 620:	00bfffc4 	movi	r2,-1
 624:	00003106 	br	6ec <___vfprintf_internal_r+0x4fc>
 628:	b5c00017 	ldw	r23,0(r22)
 62c:	b7000104 	addi	fp,r22,4
 630:	b809883a 	mov	r4,r23
 634:	00007f00 	call	7f0 <strlen>
 638:	9091c83a 	sub	r8,r18,r2
 63c:	102d883a 	mov	r22,r2
 640:	0200090e 	bge	zero,r8,668 <___vfprintf_internal_r+0x478>
 644:	400f883a 	mov	r7,r8
 648:	01800804 	movi	r6,32
 64c:	880b883a 	mov	r5,r17
 650:	a009883a 	mov	r4,r20
 654:	da001015 	stw	r8,64(sp)
 658:	00001840 	call	184 <print_repeat>
 65c:	da001017 	ldw	r8,64(sp)
 660:	103fef1e 	bne	r2,zero,620 <___vfprintf_internal_r+0x430>
 664:	8221883a 	add	r16,r16,r8
 668:	88800117 	ldw	r2,4(r17)
 66c:	b00f883a 	mov	r7,r22
 670:	b80d883a 	mov	r6,r23
 674:	880b883a 	mov	r5,r17
 678:	a009883a 	mov	r4,r20
 67c:	103ee83a 	callr	r2
 680:	103fe71e 	bne	r2,zero,620 <___vfprintf_internal_r+0x430>
 684:	85a1883a 	add	r16,r16,r22
 688:	e02d883a 	mov	r22,fp
 68c:	00001106 	br	6d4 <___vfprintf_internal_r+0x4e4>
 690:	00c00044 	movi	r3,1
 694:	04ffffc4 	movi	r19,-1
 698:	d8000e15 	stw	zero,56(sp)
 69c:	d8c00a15 	stw	r3,40(sp)
 6a0:	05400284 	movi	r21,10
 6a4:	9825883a 	mov	r18,r19
 6a8:	d8000c15 	stw	zero,48(sp)
 6ac:	d8000b15 	stw	zero,44(sp)
 6b0:	182f883a 	mov	r23,r3
 6b4:	00000806 	br	6d8 <___vfprintf_internal_r+0x4e8>
 6b8:	ddc00b15 	stw	r23,44(sp)
 6bc:	05c00084 	movi	r23,2
 6c0:	00000506 	br	6d8 <___vfprintf_internal_r+0x4e8>
 6c4:	00c00044 	movi	r3,1
 6c8:	d8c00c15 	stw	r3,48(sp)
 6cc:	05c000c4 	movi	r23,3
 6d0:	00000106 	br	6d8 <___vfprintf_internal_r+0x4e8>
 6d4:	002f883a 	mov	r23,zero
 6d8:	d8c00f17 	ldw	r3,60(sp)
 6dc:	18c00044 	addi	r3,r3,1
 6e0:	d8c00f15 	stw	r3,60(sp)
 6e4:	003edc06 	br	258 <___vfprintf_internal_r+0x68>
 6e8:	8005883a 	mov	r2,r16
 6ec:	dfc01a17 	ldw	ra,104(sp)
 6f0:	df001917 	ldw	fp,100(sp)
 6f4:	ddc01817 	ldw	r23,96(sp)
 6f8:	dd801717 	ldw	r22,92(sp)
 6fc:	dd401617 	ldw	r21,88(sp)
 700:	dd001517 	ldw	r20,84(sp)
 704:	dcc01417 	ldw	r19,80(sp)
 708:	dc801317 	ldw	r18,76(sp)
 70c:	dc401217 	ldw	r17,72(sp)
 710:	dc001117 	ldw	r16,68(sp)
 714:	dec01b04 	addi	sp,sp,108
 718:	f800283a 	ret

0000071c <__vfprintf_internal>:
 71c:	00810034 	movhi	r2,1024
 720:	10803b04 	addi	r2,r2,236
 724:	300f883a 	mov	r7,r6
 728:	280d883a 	mov	r6,r5
 72c:	200b883a 	mov	r5,r4
 730:	11000017 	ldw	r4,0(r2)
 734:	00001f01 	jmpi	1f0 <___vfprintf_internal_r>

00000738 <__sfvwrite_small_dev>:
 738:	2880000b 	ldhu	r2,0(r5)
 73c:	1080020c 	andi	r2,r2,8
 740:	10002126 	beq	r2,zero,7c8 <__sfvwrite_small_dev+0x90>
 744:	2880008f 	ldh	r2,2(r5)
 748:	defffa04 	addi	sp,sp,-24
 74c:	dc000015 	stw	r16,0(sp)
 750:	dfc00515 	stw	ra,20(sp)
 754:	dd000415 	stw	r20,16(sp)
 758:	dcc00315 	stw	r19,12(sp)
 75c:	dc800215 	stw	r18,8(sp)
 760:	dc400115 	stw	r17,4(sp)
 764:	2821883a 	mov	r16,r5
 768:	10001216 	blt	r2,zero,7b4 <__sfvwrite_small_dev+0x7c>
 76c:	2027883a 	mov	r19,r4
 770:	3025883a 	mov	r18,r6
 774:	3823883a 	mov	r17,r7
 778:	05010004 	movi	r20,1024
 77c:	04400b0e 	bge	zero,r17,7ac <__sfvwrite_small_dev+0x74>
 780:	880f883a 	mov	r7,r17
 784:	a440010e 	bge	r20,r17,78c <__sfvwrite_small_dev+0x54>
 788:	01c10004 	movi	r7,1024
 78c:	8140008f 	ldh	r5,2(r16)
 790:	900d883a 	mov	r6,r18
 794:	9809883a 	mov	r4,r19
 798:	000080c0 	call	80c <_write_r>
 79c:	0080050e 	bge	zero,r2,7b4 <__sfvwrite_small_dev+0x7c>
 7a0:	88a3c83a 	sub	r17,r17,r2
 7a4:	90a5883a 	add	r18,r18,r2
 7a8:	003ff406 	br	77c <__sfvwrite_small_dev+0x44>
 7ac:	0005883a 	mov	r2,zero
 7b0:	00000706 	br	7d0 <__sfvwrite_small_dev+0x98>
 7b4:	8080000b 	ldhu	r2,0(r16)
 7b8:	10801014 	ori	r2,r2,64
 7bc:	8080000d 	sth	r2,0(r16)
 7c0:	00bfffc4 	movi	r2,-1
 7c4:	00000206 	br	7d0 <__sfvwrite_small_dev+0x98>
 7c8:	00bfffc4 	movi	r2,-1
 7cc:	f800283a 	ret
 7d0:	dfc00517 	ldw	ra,20(sp)
 7d4:	dd000417 	ldw	r20,16(sp)
 7d8:	dcc00317 	ldw	r19,12(sp)
 7dc:	dc800217 	ldw	r18,8(sp)
 7e0:	dc400117 	ldw	r17,4(sp)
 7e4:	dc000017 	ldw	r16,0(sp)
 7e8:	dec00604 	addi	sp,sp,24
 7ec:	f800283a 	ret

000007f0 <strlen>:
 7f0:	2005883a 	mov	r2,r4
 7f4:	10c00007 	ldb	r3,0(r2)
 7f8:	18000226 	beq	r3,zero,804 <strlen+0x14>
 7fc:	10800044 	addi	r2,r2,1
 800:	003ffc06 	br	7f4 <strlen+0x4>
 804:	1105c83a 	sub	r2,r2,r4
 808:	f800283a 	ret

0000080c <_write_r>:
 80c:	defffd04 	addi	sp,sp,-12
 810:	dc000015 	stw	r16,0(sp)
 814:	04010034 	movhi	r16,1024
 818:	dc400115 	stw	r17,4(sp)
 81c:	84003e04 	addi	r16,r16,248
 820:	2023883a 	mov	r17,r4
 824:	2809883a 	mov	r4,r5
 828:	300b883a 	mov	r5,r6
 82c:	380d883a 	mov	r6,r7
 830:	dfc00215 	stw	ra,8(sp)
 834:	80000015 	stw	zero,0(r16)
 838:	0000b500 	call	b50 <write>
 83c:	00ffffc4 	movi	r3,-1
 840:	10c0031e 	bne	r2,r3,850 <_write_r+0x44>
 844:	80c00017 	ldw	r3,0(r16)
 848:	18000126 	beq	r3,zero,850 <_write_r+0x44>
 84c:	88c00015 	stw	r3,0(r17)
 850:	dfc00217 	ldw	ra,8(sp)
 854:	dc400117 	ldw	r17,4(sp)
 858:	dc000017 	ldw	r16,0(sp)
 85c:	dec00304 	addi	sp,sp,12
 860:	f800283a 	ret

00000864 <__divsi3>:
 864:	20001b16 	blt	r4,zero,8d4 <__divsi3+0x70>
 868:	000f883a 	mov	r7,zero
 86c:	28001616 	blt	r5,zero,8c8 <__divsi3+0x64>
 870:	200d883a 	mov	r6,r4
 874:	29001a2e 	bgeu	r5,r4,8e0 <__divsi3+0x7c>
 878:	00800804 	movi	r2,32
 87c:	00c00044 	movi	r3,1
 880:	00000106 	br	888 <__divsi3+0x24>
 884:	10000d26 	beq	r2,zero,8bc <__divsi3+0x58>
 888:	294b883a 	add	r5,r5,r5
 88c:	10bfffc4 	addi	r2,r2,-1
 890:	18c7883a 	add	r3,r3,r3
 894:	293ffb36 	bltu	r5,r4,884 <__divsi3+0x20>
 898:	0005883a 	mov	r2,zero
 89c:	18000726 	beq	r3,zero,8bc <__divsi3+0x58>
 8a0:	0005883a 	mov	r2,zero
 8a4:	31400236 	bltu	r6,r5,8b0 <__divsi3+0x4c>
 8a8:	314dc83a 	sub	r6,r6,r5
 8ac:	10c4b03a 	or	r2,r2,r3
 8b0:	1806d07a 	srli	r3,r3,1
 8b4:	280ad07a 	srli	r5,r5,1
 8b8:	183ffa1e 	bne	r3,zero,8a4 <__divsi3+0x40>
 8bc:	38000126 	beq	r7,zero,8c4 <__divsi3+0x60>
 8c0:	0085c83a 	sub	r2,zero,r2
 8c4:	f800283a 	ret
 8c8:	014bc83a 	sub	r5,zero,r5
 8cc:	39c0005c 	xori	r7,r7,1
 8d0:	003fe706 	br	870 <__divsi3+0xc>
 8d4:	0109c83a 	sub	r4,zero,r4
 8d8:	01c00044 	movi	r7,1
 8dc:	003fe306 	br	86c <__divsi3+0x8>
 8e0:	00c00044 	movi	r3,1
 8e4:	003fee06 	br	8a0 <__divsi3+0x3c>

000008e8 <__modsi3>:
 8e8:	20001716 	blt	r4,zero,948 <__modsi3+0x60>
 8ec:	000f883a 	mov	r7,zero
 8f0:	2005883a 	mov	r2,r4
 8f4:	28001216 	blt	r5,zero,940 <__modsi3+0x58>
 8f8:	2900162e 	bgeu	r5,r4,954 <__modsi3+0x6c>
 8fc:	01800804 	movi	r6,32
 900:	00c00044 	movi	r3,1
 904:	00000106 	br	90c <__modsi3+0x24>
 908:	30000a26 	beq	r6,zero,934 <__modsi3+0x4c>
 90c:	294b883a 	add	r5,r5,r5
 910:	31bfffc4 	addi	r6,r6,-1
 914:	18c7883a 	add	r3,r3,r3
 918:	293ffb36 	bltu	r5,r4,908 <__modsi3+0x20>
 91c:	18000526 	beq	r3,zero,934 <__modsi3+0x4c>
 920:	1806d07a 	srli	r3,r3,1
 924:	11400136 	bltu	r2,r5,92c <__modsi3+0x44>
 928:	1145c83a 	sub	r2,r2,r5
 92c:	280ad07a 	srli	r5,r5,1
 930:	183ffb1e 	bne	r3,zero,920 <__modsi3+0x38>
 934:	38000126 	beq	r7,zero,93c <__modsi3+0x54>
 938:	0085c83a 	sub	r2,zero,r2
 93c:	f800283a 	ret
 940:	014bc83a 	sub	r5,zero,r5
 944:	003fec06 	br	8f8 <__modsi3+0x10>
 948:	0109c83a 	sub	r4,zero,r4
 94c:	01c00044 	movi	r7,1
 950:	003fe706 	br	8f0 <__modsi3+0x8>
 954:	00c00044 	movi	r3,1
 958:	003ff106 	br	920 <__modsi3+0x38>

0000095c <__udivsi3>:
 95c:	200d883a 	mov	r6,r4
 960:	2900152e 	bgeu	r5,r4,9b8 <__udivsi3+0x5c>
 964:	28001416 	blt	r5,zero,9b8 <__udivsi3+0x5c>
 968:	00800804 	movi	r2,32
 96c:	00c00044 	movi	r3,1
 970:	00000206 	br	97c <__udivsi3+0x20>
 974:	10000e26 	beq	r2,zero,9b0 <__udivsi3+0x54>
 978:	28000516 	blt	r5,zero,990 <__udivsi3+0x34>
 97c:	294b883a 	add	r5,r5,r5
 980:	10bfffc4 	addi	r2,r2,-1
 984:	18c7883a 	add	r3,r3,r3
 988:	293ffa36 	bltu	r5,r4,974 <__udivsi3+0x18>
 98c:	18000826 	beq	r3,zero,9b0 <__udivsi3+0x54>
 990:	0005883a 	mov	r2,zero
 994:	31400236 	bltu	r6,r5,9a0 <__udivsi3+0x44>
 998:	314dc83a 	sub	r6,r6,r5
 99c:	10c4b03a 	or	r2,r2,r3
 9a0:	1806d07a 	srli	r3,r3,1
 9a4:	280ad07a 	srli	r5,r5,1
 9a8:	183ffa1e 	bne	r3,zero,994 <__udivsi3+0x38>
 9ac:	f800283a 	ret
 9b0:	0005883a 	mov	r2,zero
 9b4:	f800283a 	ret
 9b8:	00c00044 	movi	r3,1
 9bc:	003ff406 	br	990 <__udivsi3+0x34>

000009c0 <__umodsi3>:
 9c0:	2005883a 	mov	r2,r4
 9c4:	2900122e 	bgeu	r5,r4,a10 <__umodsi3+0x50>
 9c8:	28001116 	blt	r5,zero,a10 <__umodsi3+0x50>
 9cc:	01800804 	movi	r6,32
 9d0:	00c00044 	movi	r3,1
 9d4:	00000206 	br	9e0 <__umodsi3+0x20>
 9d8:	30000c26 	beq	r6,zero,a0c <__umodsi3+0x4c>
 9dc:	28000516 	blt	r5,zero,9f4 <__umodsi3+0x34>
 9e0:	294b883a 	add	r5,r5,r5
 9e4:	31bfffc4 	addi	r6,r6,-1
 9e8:	18c7883a 	add	r3,r3,r3
 9ec:	293ffa36 	bltu	r5,r4,9d8 <__umodsi3+0x18>
 9f0:	18000626 	beq	r3,zero,a0c <__umodsi3+0x4c>
 9f4:	1806d07a 	srli	r3,r3,1
 9f8:	11400136 	bltu	r2,r5,a00 <__umodsi3+0x40>
 9fc:	1145c83a 	sub	r2,r2,r5
 a00:	280ad07a 	srli	r5,r5,1
 a04:	183ffb1e 	bne	r3,zero,9f4 <__umodsi3+0x34>
 a08:	f800283a 	ret
 a0c:	f800283a 	ret
 a10:	00c00044 	movi	r3,1
 a14:	003ff706 	br	9f4 <__umodsi3+0x34>

00000a18 <__mulsi3>:
 a18:	0005883a 	mov	r2,zero
 a1c:	20000726 	beq	r4,zero,a3c <__mulsi3+0x24>
 a20:	20c0004c 	andi	r3,r4,1
 a24:	2008d07a 	srli	r4,r4,1
 a28:	18000126 	beq	r3,zero,a30 <__mulsi3+0x18>
 a2c:	1145883a 	add	r2,r2,r5
 a30:	294b883a 	add	r5,r5,r5
 a34:	203ffa1e 	bne	r4,zero,a20 <__mulsi3+0x8>
 a38:	f800283a 	ret
 a3c:	f800283a 	ret

00000a40 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 a40:	deffff04 	addi	sp,sp,-4
 a44:	01010034 	movhi	r4,1024
 a48:	01400034 	movhi	r5,0
 a4c:	dfc00015 	stw	ra,0(sp)
 a50:	21000204 	addi	r4,r4,8
 a54:	29432a04 	addi	r5,r5,3240

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 a58:	2140061e 	bne	r4,r5,a74 <alt_load+0x34>
 a5c:	01000034 	movhi	r4,0
 a60:	01400034 	movhi	r5,0
 a64:	21000804 	addi	r4,r4,32
 a68:	29400804 	addi	r5,r5,32
 a6c:	2140121e 	bne	r4,r5,ab8 <alt_load+0x78>
 a70:	00000b06 	br	aa0 <alt_load+0x60>
 a74:	00c10034 	movhi	r3,1024
 a78:	18c03e04 	addi	r3,r3,248
 a7c:	1907c83a 	sub	r3,r3,r4
 a80:	0005883a 	mov	r2,zero
  {
    while( to != end )
 a84:	10fff526 	beq	r2,r3,a5c <alt_load+0x1c>
    {
      *to++ = *from++;
 a88:	114f883a 	add	r7,r2,r5
 a8c:	39c00017 	ldw	r7,0(r7)
 a90:	110d883a 	add	r6,r2,r4
 a94:	10800104 	addi	r2,r2,4
 a98:	31c00015 	stw	r7,0(r6)
 a9c:	003ff906 	br	a84 <alt_load+0x44>
 aa0:	01010034 	movhi	r4,1024
 aa4:	01400034 	movhi	r5,0
 aa8:	21000004 	addi	r4,r4,0
 aac:	29432804 	addi	r5,r5,3232

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 ab0:	2140101e 	bne	r4,r5,af4 <alt_load+0xb4>
 ab4:	00000b06 	br	ae4 <alt_load+0xa4>
 ab8:	00c00034 	movhi	r3,0
 abc:	18c00804 	addi	r3,r3,32
 ac0:	1907c83a 	sub	r3,r3,r4
 ac4:	0005883a 	mov	r2,zero
  {
    while( to != end )
 ac8:	10fff526 	beq	r2,r3,aa0 <alt_load+0x60>
    {
      *to++ = *from++;
 acc:	114f883a 	add	r7,r2,r5
 ad0:	39c00017 	ldw	r7,0(r7)
 ad4:	110d883a 	add	r6,r2,r4
 ad8:	10800104 	addi	r2,r2,4
 adc:	31c00015 	stw	r7,0(r6)
 ae0:	003ff906 	br	ac8 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 ae4:	0000c900 	call	c90 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 ae8:	dfc00017 	ldw	ra,0(sp)
 aec:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 af0:	0000c941 	jmpi	c94 <alt_icache_flush_all>
 af4:	00c10034 	movhi	r3,1024
 af8:	18c00204 	addi	r3,r3,8
 afc:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 b00:	0005883a 	mov	r2,zero
  {
    while( to != end )
 b04:	18bff726 	beq	r3,r2,ae4 <alt_load+0xa4>
    {
      *to++ = *from++;
 b08:	114f883a 	add	r7,r2,r5
 b0c:	39c00017 	ldw	r7,0(r7)
 b10:	110d883a 	add	r6,r2,r4
 b14:	10800104 	addi	r2,r2,4
 b18:	31c00015 	stw	r7,0(r6)
 b1c:	003ff906 	br	b04 <alt_load+0xc4>

00000b20 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 b20:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 b24:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 b28:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 b2c:	0000bb00 	call	bb0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 b30:	0000bd00 	call	bd0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 b34:	d1a00517 	ldw	r6,-32748(gp)
 b38:	d1600617 	ldw	r5,-32744(gp)
 b3c:	d1200717 	ldw	r4,-32740(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 b40:	dfc00017 	ldw	ra,0(sp)
 b44:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 b48:	000005c1 	jmpi	5c <main>

00000b4c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 b4c:	0000c081 	jmpi	c08 <alt_busy_sleep>

00000b50 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 b50:	00800044 	movi	r2,1
 b54:	20800226 	beq	r4,r2,b60 <write+0x10>
 b58:	00800084 	movi	r2,2
 b5c:	2080041e 	bne	r4,r2,b70 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 b60:	01010034 	movhi	r4,1024
 b64:	000f883a 	mov	r7,zero
 b68:	21003c04 	addi	r4,r4,240
 b6c:	0000bd41 	jmpi	bd4 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 b70:	d0a00317 	ldw	r2,-32756(gp)
 b74:	10000926 	beq	r2,zero,b9c <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 b78:	deffff04 	addi	sp,sp,-4
 b7c:	dfc00015 	stw	ra,0(sp)
 b80:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 b84:	00c01444 	movi	r3,81
 b88:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 b8c:	00bfffc4 	movi	r2,-1
 b90:	dfc00017 	ldw	ra,0(sp)
 b94:	dec00104 	addi	sp,sp,4
 b98:	f800283a 	ret
 b9c:	d0a00404 	addi	r2,gp,-32752
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 ba0:	00c01444 	movi	r3,81
 ba4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 ba8:	00bfffc4 	movi	r2,-1
 bac:	f800283a 	ret

00000bb0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 bb0:	deffff04 	addi	sp,sp,-4
 bb4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS, nios);
 bb8:	0000c980 	call	c98 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 bbc:	00800044 	movi	r2,1
 bc0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 bc4:	dfc00017 	ldw	ra,0(sp)
 bc8:	dec00104 	addi	sp,sp,4
 bcc:	f800283a 	ret

00000bd0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 bd0:	f800283a 	ret

00000bd4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 bd4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 bd8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 bdc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 be0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 be4:	2980072e 	bgeu	r5,r6,c04 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 be8:	38c00037 	ldwio	r3,0(r7)
 bec:	18ffffec 	andhi	r3,r3,65535
 bf0:	183ffc26 	beq	r3,zero,be4 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 bf4:	28c00007 	ldb	r3,0(r5)
 bf8:	20c00035 	stwio	r3,0(r4)
 bfc:	29400044 	addi	r5,r5,1
 c00:	003ff806 	br	be4 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
 c04:	f800283a 	ret

00000c08 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 c08:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 c0c:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 c10:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 c14:	dc000015 	stw	r16,0(sp)
 c18:	dfc00115 	stw	ra,4(sp)
 c1c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 c20:	000095c0 	call	95c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 c24:	10001026 	beq	r2,zero,c68 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 c28:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 c2c:	013999b4 	movhi	r4,58982
 c30:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 c34:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 c38:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 c3c:	297fffc4 	addi	r5,r5,-1
 c40:	283ffe1e 	bne	r5,zero,c3c <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 c44:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 c48:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 c4c:	18bffb16 	blt	r3,r2,c3c <alt_busy_sleep+0x34>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 c50:	01400144 	movi	r5,5
 c54:	8009883a 	mov	r4,r16
 c58:	0000a180 	call	a18 <__mulsi3>
 c5c:	10bfffc4 	addi	r2,r2,-1
 c60:	103ffe1e 	bne	r2,zero,c5c <alt_busy_sleep+0x54>
 c64:	00000506 	br	c7c <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 c68:	01400144 	movi	r5,5
 c6c:	8009883a 	mov	r4,r16
 c70:	0000a180 	call	a18 <__mulsi3>
 c74:	10bfffc4 	addi	r2,r2,-1
 c78:	00bffe16 	blt	zero,r2,c74 <alt_busy_sleep+0x6c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 c7c:	0005883a 	mov	r2,zero
 c80:	dfc00117 	ldw	ra,4(sp)
 c84:	dc000017 	ldw	r16,0(sp)
 c88:	dec00204 	addi	sp,sp,8
 c8c:	f800283a 	ret

00000c90 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 c90:	f800283a 	ret

00000c94 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 c94:	f800283a 	ret

00000c98 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 c98:	000170fa 	wrctl	ienable,zero
 c9c:	f800283a 	ret
